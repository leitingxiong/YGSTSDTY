<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShaiRandom</name>
    </assembly>
    <members>
        <member name="T:ShaiRandom.BitExtensions">
            <summary>
            Specific implementations of bitwise operations that .NET can optimize well in some cases.
            </summary>
        </member>
        <member name="M:ShaiRandom.BitExtensions.RotateLeft(System.UInt64,System.Int32)">
            <summary>
            Bitwise left-rotation of a ulong by amt, in bits.
            </summary>
            <param name="ul">The ulong to rotate left.</param>
            <param name="amt">How many bits to rotate.</param>
            <returns>The rotated ul.</returns>
        </member>
        <member name="M:ShaiRandom.BitExtensions.RotateRight(System.UInt64,System.Int32)">
            <summary>
            Bitwise right-rotation of a ulong by amt, in bits.
            </summary>
            <param name="ul">The ulong to rotate right.</param>
            <param name="amt">How many bits to rotate.</param>
            <returns>The rotated ul.</returns>
        </member>
        <member name="M:ShaiRandom.BitExtensions.BitDecrement(System.Double)">
            <summary>
            If x is finite, returns the next smallest value that compares less than x.
            </summary>
            <remarks>This is almost the same as Math.BitDecrement in more recent .NET versions, but returns
            x as-is if it is not finite (matching the behavior in mathematics more accurately).
            It also returns negative Epsilon if x is 0.0, positive or negative.</remarks>
            <param name="x">The value that is slightly higher than desired.</param>
            <returns>The next smallest value that compares less than x.</returns>
        </member>
        <member name="M:ShaiRandom.BitExtensions.BitIncrement(System.Double)">
            <summary>
            If x is finite, returns the next largest value that compares greater than x.
            </summary>
            <remarks>This is almost the same as Math.BitIncrement in more recent .NET versions, but returns
            x as-is if it is not finite (matching the behavior in mathematics more accurately).
            It also returns Epsilon if x is 0.0f, positive or negative.</remarks>
            <param name="x">The value that is slightly lower than desired.</param>
            <returns>The next smallest value that compares greater than x.</returns>
        </member>
        <member name="M:ShaiRandom.BitExtensions.BitDecrement(System.Single)">
            <summary>
            If x is finite, returns the next smallest value that compares less than x.
            </summary>
            <remarks>This is almost the same as Math.BitDecrement in more recent .NET versions, but returns
            x as-is if it is not finite (matching the behavior in mathematics more accurately).
            It also returns negative Epsilon if x is 0.0f, positive or negative.</remarks>
            <param name="x">The value that is slightly higher than desired.</param>
            <returns>The next smallest value that compares less than x.</returns>
        </member>
        <member name="M:ShaiRandom.BitExtensions.BitIncrement(System.Single)">
            <summary>
            If x is finite, returns the next largest value that compares greater than x.
            </summary>
            <remarks>This is almost the same as Math.BitIncrement in more recent .NET versions, but returns
            x as-is if it is not finite (matching the behavior in mathematics more accurately).
            It also returns Epsilon if x is 0.0f, positive or negative.</remarks>
            <param name="x">The value that is slightly lower than desired.</param>
            <returns>The next smallest value that compares greater than x.</returns>
        </member>
        <member name="T:ShaiRandom.Collections.ProbabilityTable`1">
            <summary>
            A fixed-size probability table that pairs (potentially repeated) items with weights that affect how often they
            are returned by <code>NextItem()</code>.
            </summary>
            <remarks>
            You can call Reset() to change the table this uses. This uses Vose' Alias Method to get constant-time lookups.
            </remarks>
            <typeparam name="TItem">The type of item that this holds, other than weights; this can be an int or id to look up a table entry elsewhere.</typeparam>
        </member>
        <member name="P:ShaiRandom.Collections.ProbabilityTable`1.Items">
            <summary>
            The IReadOnlyList of (item, weight) pairs this uses for what <see cref="M:ShaiRandom.Collections.ProbabilityTable`1.NextItem"/> can return.
            </summary>
        </member>
        <member name="P:ShaiRandom.Collections.ProbabilityTable`1.Count">
            <summary>
            How many item-weight pairs this stores (not necessarily how many unique items).
            </summary>
        </member>
        <member name="P:ShaiRandom.Collections.ProbabilityTable`1.Random">
            <summary>
            The IEnhancedRandom this uses to make its weighted random choices. This defaults to an unseeded <see cref="T:ShaiRandom.Generators.MizuchiRandom"/> if not specified.
            </summary>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.#ctor">
            <summary>
            Constructs an empty ProbabilityTable. You must call Reset() with some items this can choose from before using this ProbabilityTable.
            </summary>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Double}})">
            <summary>
            Constructs a ProbabilityTable that will use the given (item, weight) pairs and an unseeded MizuchiRandom.
            </summary>
            <param name="items">
            A list of pairs, where the first item of a pair is the TItem to be potentially returned,
            and the second item is the weight for how much to favor returning that item.
            </param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.#ctor(System.Collections.Generic.IReadOnlyList{System.ValueTuple{`0,System.Double}}@)">
            <summary>
            Constructs a ProbabilityTable that will use the given (item, weight) pairs and an unseeded MizuchiRandom.
            </summary>
            <param name="items">
            An IReadOnlyList of pairs, where the first item of a pair is the TItem to be potentially returned,
            and the second item is the weight for how much to favor returning that item.  The list will NOT be copied,
            and must not be modified after it is passed to this function.
            </param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Double}})">
            <summary>
            Constructs a ProbabilityTable that will use the given (item, weight) pairs and the given IEnhancedRandom.
            </summary>
            <param name="random">Any IEnhancedRandom, such as a <see cref="T:ShaiRandom.Generators.TrimRandom"/> or <see cref="T:ShaiRandom.Generators.LaserRandom"/>.</param>
            <param name="items">
            A list of pairs, where the first item of a pair is the TItem to be potentially returned, and the
            second item is the weight for how much to favor returning that item.
            </param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{System.ValueTuple{`0,System.Double}}@)">
            <summary>
            Constructs a ProbabilityTable that will use the given (item, weight) pairs and the given IEnhancedRandom.
            </summary>
            <param name="random">Any IEnhancedRandom, such as a <see cref="T:ShaiRandom.Generators.TrimRandom"/> or <see cref="T:ShaiRandom.Generators.LaserRandom"/>.</param>
            <param name="items">
            An IReadOnlyList of pairs, where the first item of a pair is the TItem to be potentially returned, and the
            second item is the weight for how much to favor returning that item.  The list will NOT be copied,
            and must not be modified after it is passed to this function.
            </param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs a ProbabilityTable that will use the given items and weights as side-by-side sequences, and an unseeded MizuchiRandom.
            </summary>
            <remarks>
            If TItem is a reference type, the objects themselves are not copied.  If the two lists given are not the same size,
            items will be paired until the end of one of the lists is reached.
            </remarks>
            <param name="items">A list of TItem instances.</param>
            <param name="weights">A list of double weights.</param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs a ProbabilityTable that will use the given items and weights as side-by-side sequences, and the given IEnhancedRandom.
            </summary>
            <remarks>
            If TItem is a reference type, the objects themselves are not copied.  If the two lists given are not the same size,
            items will be paired until the end of one of the lists is reached.
            </remarks>
            <param name="random">Any IEnhancedRandom, such as a <see cref="T:ShaiRandom.Generators.TrimRandom"/> or <see cref="T:ShaiRandom.Generators.LaserRandom"/>.</param>
            <param name="items">A list of TItem instances.</param>
            <param name="weights">A list of double weights.</param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.Reset(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Resets the ProbabilityTable to use a different group of items and weights, with the items and weights specified in side-by-side lists.
            </summary>
            <remarks>
            If TItem is a reference type, the objects themselves will not be copied.  If the two lists given are not the same size,
            items will be paired until the end of one of the lists is reached.
            </remarks>
            <param name="items">A list of TItem instances.</param>
            <param name="weights">An IReadOnlyList of double weights.</param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.Reset(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Double}})">
            <summary>
            Resets the ProbabilityTable to use a different group of items and weights, with the items and weights specified as pairs in one list.
            </summary>
            <param name="items">A list of pairs, where the first item of a pair is the TItem to be potentially returned, and the second item is the weight for how much to favor returning that item.</param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.Reset(System.Collections.Generic.IReadOnlyList{System.ValueTuple{`0,System.Double}}@)">
            <summary>
            Resets the ProbabilityTable to use a different group of items and weights, with the items and weights specified as pairs in one list.
            </summary>
            <remarks>
            This does NOT copy the given list, and the list must not be changed after it is passed to this function.
            </remarks>
            <param name="items">An IReadOnlyList of pairs, where the first item of a pair is the TItem to be potentially returned, and the second item is the weight for how much to favor returning that item.</param>
        </member>
        <member name="M:ShaiRandom.Collections.ProbabilityTable`1.NextItem">
            <summary>
            Gets a randomly-chosen TItem item (obeying the given weights) from the data this stores.
            </summary>
            <returns>A randomly-chosen TItem item.</returns>
            <exception cref="T:System.InvalidOperationException">If this was reset or initialized with an empty list of items.</exception>
        </member>
        <member name="T:ShaiRandom.Distributions.AbstractDistribution">
            <summary>
              Abstract class which implements some features shared across all distributions.
            </summary>
            <remarks>The thread safety of this class depends on the one of the underlying generator.</remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.AbstractDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Builds a distribution using given generator.
            </summary>
            <param name="generator">The generator that will be used by the distribution.</param>
            <exception cref="T:System.ArgumentNullException">Given generator is null.</exception>
        </member>
        <member name="P:ShaiRandom.Distributions.AbstractDistribution.Generator">
            <summary>
              Gets the <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object that is used as underlying random number generator.
            </summary>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.BetaDistribution">
            <summary>
              Provides generation of beta distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta
                distribution</a> and <a href="http://www.xycoon.com/beta_randomnumbers.htm">Xycoon -
                Beta Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of beta distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of beta distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of beta distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.BetaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of beta distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.BetaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.AreValidParams">
            <summary>
              Determines whether beta distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaDistribution.Sample">
            <summary>
              Declares a function returning a beta distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.BetaDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution">
            <summary>
              Provides generation of beta-prime distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> type bases upon
                information presented on <a href="http://www.xycoon.com/ibeta.htm">Xycoon - Inverted
                Beta Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of beta-prime distributed
              random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of beta-prime distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of beta-prime
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to one.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of beta-prime distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to one.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of beta prime distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of beta prime distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 1.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 1.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.AreValidParams">
            <summary>
              Determines whether beta prime distribution is defined under given parameters. The
              default definition returns true if alpha and beta are greater than one; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution.Sample">
            <summary>
              Declares a function returning a beta prime distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.BetaPrimeDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.CauchyDistribution">
            <summary>
              Provides generation of cauchy distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Wikipedia -
                Cauchy distribution</a> and <a href="http://www.xycoon.com/cauchy2p_random.htm">Xycoon -
                Cauchy Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.CauchyDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.CauchyDistribution.DefaultGamma">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Gamma"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.CauchyDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.CauchyDistribution._gamma">
            <summary>
              Stores the parameter gamma which is used for generation of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha of cauchy distributed random numbers which is used
              for their generation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Gamma">
            <summary>
              Gets or sets the parameter gamma which is used for generation of cauchy distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of cauchy distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of cauchy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="gamma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.IsValidGamma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.CauchyDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.AreValidParams">
            <summary>
              Determines whether cauchy distribution is defined under given parameters. The default
              definition returns true if gamma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.CauchyDistribution.Sample">
            <summary>
              Declares a function returning a cauchy distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.CauchyDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.ChiDistribution">
            <summary>
              Provides generation of chi distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ChiDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ChiDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of chi distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of chi distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ChiDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.IsValidParam">
            <summary>
              Determines whether chi distribution is defined under given parameter. The default
              definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class.</remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiDistribution.Sample">
            <summary>
              Declares a function returning a chi distributed floating point random number.
            </summary>
            <remarks>This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ChiDistribution"/> class.</remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution">
            <summary>
              Provides generation of chi-square distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> type bases upon
                information presented on
                <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - Chi-square distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ChiSquareDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of chi square distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of chi-square
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of chi square distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.IsValidParam">
            <summary>
              Determines whether chi square distribution is defined under given parameter. The
              default definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ChiSquareDistribution.Sample">
            <summary>
              Declares a function returning a chi square distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ChiSquareDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution">
            <summary>
              Provides generation of continuous uniformly distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> type bases upon
                information presented on
                <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">Wikipedia -
                Uniform distribution (continuous)</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of uniformly distributed
              random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is greater than <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Beta"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/> is greater than <paramref name="value"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class,
              using the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of continuous uniform distributed
              random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is less than or equal to <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Beta"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to <see cref="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Alpha"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.AreValidParams">
            <summary>
              Determines whether continuous uniform distribution is defined under given parameters.
              The default definition returns true if alpha is less than or equal to beta; otherwise,
              it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution.Sample">
            <summary>
              Declares a function returning a continuous uniform distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ContinuousUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.ErlangDistribution">
            <summary>
              Provides generation of erlang distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia -
                Erlang distribution</a> and <a href="http://www.xycoon.com/erlang_random.htm">Xycoon -
                Erlang Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ErlangDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ErlangDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ErlangDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ErlangDistribution._lambda">
            <summary>
              Stores the parameter lambda which is used for generation of rayleigh distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of erlang distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of erlang distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.#ctor(System.Int32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.#ctor(System.UInt32,System.Int32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Int32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of erlang distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of erlang distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ErlangDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.AreValidParams">
            <summary>
              Determines whether erlang distribution is defined under given parameters. The default
              definition returns true if alpha and lambda are greater than zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ErlangDistribution.Sample">
            <summary>
              Declares a function returning an erlang distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ErlangDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution">
            <summary>
              Provides generation of exponential distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> type bases upon
                information presented on
                <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Wikipedia - Exponential distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ExponentialDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ExponentialDistribution._lambda">
            <summary>
              Stores the parameter lambda which is used for generation of exponential distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of exponential
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="lambda">
              The parameter lambda which is used for generation of exponential distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ExponentialDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.IsValidParam">
            <summary>
              Determines whether exponential distribution is defined under given parameter. The
              default definition returns true if lambda is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ExponentialDistribution.Sample">
            <summary>
              Declares a function returning an exponential distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ExponentialDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution">
            <summary>
              Provides generation of Fisher-Snedecor distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> type bases upon
                information presented on <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia
                - F-distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of Fisher-Snedecor distributed
              random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of Fisher-Snedecor distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of Fisher-Snedecor
              distributed random numbers.
            </summary>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of Fisher-Snedecor
              distributed random numbers.
            </summary>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.#ctor(System.UInt32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class,
              using the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of fisher snedecor distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.IsValidBeta(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.AreValidParams">
            <summary>
              Determines whether fisher snedecor distribution is defined under given parameters. The
              default definition returns true if alpha and beta are greater than zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution.Sample">
            <summary>
              Declares a function returning a fisher snedecor distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.FisherSnedecorDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution">
            <summary>
              Provides generation of Fisher-Tippett distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> type bases upon
                information presented on
                <a href="https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution">Wikipedia - Fisher-Tippett distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherTippettDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of fisher tippett distributed
              random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.FisherTippettDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of fisher tippett distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of Fisher-Tippett
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of Fisher-Tippett
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Call <see cref="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class, using
              a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of fisher tippett distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of fisher tippett distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.AreValidParams">
            <summary>
              Determines whether fisher tippett distribution is defined under given parameters. The
              default definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.FisherTippettDistribution.Sample">
            <summary>
              Declares a function returning a fisher tippett distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.FisherTippettDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.GammaDistribution">
            <summary>
              Provides generation of gamma distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.GammaDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.GammaDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.GammaDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.GammaDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of gamma distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.GammaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of gamma distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.GammaDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of gamma distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of gamma distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.GammaDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.AreValidParams">
            <summary>
              Determines whether gamma distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.GammaDistribution.Sample">
            <summary>
              Declares a function returning a gamma distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.GammaDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution">
            <summary>
              Provides generation of Kumaraswamy distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Kumaraswamy_distribution">Wikipedia - Kumaraswamy distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of Kumaraswamy distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of Kumaraswamy distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of Kumaraswamy distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of Kumaraswamy distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of Kumaraswamy distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of Kumaraswamy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of Kumaraswamy distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of Kumaraswamy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of Kumaraswamy distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of Kumaraswamy distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.AreValidParams">
            <summary>
              Determines whether Kumaraswamy distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution.Sample">
            <summary>
              Declares a function returning a Kumaraswamy distributed floating point random number.
            </summary>
            <remarks>
              The alpha and beta parameters to the returned Func are expected to be pre-inverted (equal to 1.0 / Alpha or 1.0 / Beta), which
              is how this class stores alpha and beta internally.
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.KumaraswamyDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution">
            <summary>
              Provides generation of laplace distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia -
                Laplace distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LaplaceDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LaplaceDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LaplaceDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LaplaceDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of laplace distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of laplace distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of laplace distributed random numbers.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of laplace distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LaplaceDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.AreValidParams">
            <summary>
              Determines whether laplace distribution is defined under given parameters. The default
              definition returns true if alpha is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LaplaceDistribution.Sample">
            <summary>
              Declares a function returning a laplace distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.LaplaceDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.LogisticDistribution">
            <summary>
              Provides generation of logistic distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> type bases upon information
                presented on <a href="https://en.wikipedia.org/wiki/Logistic_distribution">Wikipedia -
                Logistic Distribution</a> and the implementation in the
                <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LogisticDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LogisticDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LogisticDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of logistic distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LogisticDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of logistic distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of logistic distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of logistic distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="mu">
              The parameter mu which is used for generation of logistic distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of logistic distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LogisticDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.AreValidParams">
            <summary>
              Determines whether logistic distribution is defined under given parameters. The
              default definition returns true if sigma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LogisticDistribution.Sample">
            <summary>
              Declares a function returning a logistic distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.LogisticDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.LognormalDistribution">
            <summary>
              Provides generation of lognormal distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> type bases upon
                information presented on
                <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Lognormal
                Distribution</a> and the implementation in the
                <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LognormalDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LognormalDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LognormalDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.LognormalDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of lognormal distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of lognormal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of lognormal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="mu">
              The parameter mu which is used for generation of lognormal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of lognormal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.LognormalDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.AreValidParams">
            <summary>
              Determines whether lognormal distribution is defined under given parameters. The
              default definition returns true if sigma is greater than or equal to zero; otherwise,
              it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.LognormalDistribution.Sample">
            <summary>
              Declares a function returning a lognormal distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.LognormalDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.NormalDistribution">
            <summary>
              Provides generation of normal distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> type bases upon
                information presented on <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia -
                Normal distribution</a> and the probit function from
                <a href="https://web.archive.org/web/20151030215612/http://home.online.no/~pjacklam/notes/invnorm/">Peter John Acklam's page (archived)</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.NormalDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.NormalDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.NormalDistribution._mu">
            <summary>
              Stores the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.NormalDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of normal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.NormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of normal distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.NormalDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="mu">
              The parameter mu which is used for generation of normal distributed random numbers.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of normal distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.IsValidMu(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.NormalDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.AreValidParams">
            <summary>
              Determines whether normal distribution is defined under given parameters. The default
              definition returns true if sigma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.NormalDistribution.Sample">
            <summary>
              Declares a function returning a normal distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.NormalDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.ParetoDistribution">
            <summary>
              Provides generation of pareto distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia -
                Pareto distribution</a> and <a href="http://www.xycoon.com/par_random.htm">Xycoon -
                Pareto Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ParetoDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ParetoDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ParetoDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of pareto distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.ParetoDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of pareto distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of pareto distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of pareto distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of pareto distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of pareto distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.ParetoDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.AreValidParams">
            <summary>
              Determines whether pareto distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.ParetoDistribution.Sample">
            <summary>
              Declares a function returning a pareto distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.ParetoDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.PowerDistribution">
            <summary>
              Provides generation of power distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> type bases upon information
                presented on <a href="https://www.xycoon.com/power.htm">Xycoon - Power Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.PowerDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.PowerDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.PowerDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of power distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.PowerDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of power distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of power distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:ShaiRandom.Distributions.Continuous.PowerDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of power distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:ShaiRandom.Distributions.Continuous.PowerDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of power distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of power distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="beta"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.PowerDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.AreValidParams">
            <summary>
              Determines whether power distribution is defined under given parameters. The default
              definition returns true if alpha and beta are greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.PowerDistribution.Sample">
            <summary>
              Declares a function returning a power distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.PowerDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.RayleighDistribution">
            <summary>
              Provides generation of rayleigh distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia -
                Rayleigh Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.RayleighDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.RayleighDistribution._sigma">
            <summary>
              Stores the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of rayleigh distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="sigma">
              The parameter sigma which is used for generation of rayleigh distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="sigma"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.IsValidSigma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.RayleighDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.IsValidParam">
            <summary>
              Determines whether rayleigh distribution is defined under given parameter. The default
              definition returns true if sigma is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.RayleighDistribution.Sample">
            <summary>
              Declares a function returning a rayleigh distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.RayleighDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution">
            <summary>
              Provides generation of t-distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> type bases upon
                information presented on
                <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">Wikipedia - Student's
                t-distribution</a> and <a href="http://www.xycoon.com/stt_random.htm">Xycoon - Student t Distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.StudentsTDistribution.DefaultNu">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Nu"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.StudentsTDistribution._nu">
            <summary>
              Stores the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Nu">
            <summary>
              Gets or sets the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="nu">
              The parameter nu which is used for generation of student's t distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="nu"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.IsValidNu(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Nu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.StudentsTDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.IsValidParam">
            <summary>
              Determines whether student's t distribution is defined under given parameter. The
              default definition returns true if nu is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.StudentsTDistribution.Sample">
            <summary>
              Declares a function returning a student's t distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.StudentsTDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.TriangularDistribution">
            <summary>
              Provides generation of triangular distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> type bases upon
                information presented on
                <a href="http://en.wikipedia.org/wiki/Triangular_distribution">Wikipedia - Triangular
                distribution</a> and the implementation in the
                <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.TriangularDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.TriangularDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.TriangularDistribution.DefaultGamma">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Gamma"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.TriangularDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of triangular distributed
              random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.TriangularDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of triangular distributed
              random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.TriangularDistribution._gamma">
            <summary>
              Stores the parameter gamma which is used for generation of triangular distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of triangular
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is greater than or equal to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Beta"/>, or
              <paramref name="value"/> is greater than <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Gamma"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of triangular distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Alpha"/> is greater than or equal to <paramref name="value"/>, or
              <paramref name="value"/> is less than <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Gamma"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Gamma">
            <summary>
              Gets or sets the parameter gamma which is used for generation of triangular
              distributed random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Alpha"/> is greater than <paramref name="value"/>, or <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Beta"/> is
              less than <paramref name="value"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.#ctor(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of triangular distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of triangular distributed random numbers.
            </param>
            <param name="gamma">
              The parameter gamma which is used for generation of triangular distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than or equal to <paramref name="beta"/>, or
              <paramref name="alpha"/> is greater than <paramref name="gamma"/>, or
              <paramref name="beta"/> is less than <paramref name="gamma"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is less than <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Beta"/>, and less than or
              equal to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.IsValidBeta(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Alpha"/>, and greater than
              or equal to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.IsValidGamma(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Alpha"/>, and
              greater than or equal to <see cref="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.TriangularDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.AreValidParams">
            <summary>
              Determines whether triangular distribution is defined under given parameters. The
              default definition returns true if alpha is less than beta, and if alpha is less than
              or equal to gamma, and if beta is greater than or equal to gamma; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.TriangularDistribution.Sample">
            <summary>
              Declares a function returning a triangular distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.TriangularDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Continuous.WeibullDistribution">
            <summary>
              Provides generation of weibull distributed random numbers.
            </summary>
            <remarks>
              <para>
                The implementation of the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> type bases upon information
                presented on <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia -
                Weibull distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.WeibullDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.WeibullDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.WeibullDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Continuous.WeibullDistribution._lambda">
            <summary>
              Stores the parameter lambda which is used for generation of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of weibull distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of erlang distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.#ctor(System.UInt32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of weibull distributed random numbers.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of weibull distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> or <paramref name="lambda"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Continuous.WeibullDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.AreValidParams">
            <summary>
              Determines whether weibull distribution is defined under given parameters. The default
              definition returns true if alpha and lambda are greater than zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Continuous.WeibullDistribution.Sample">
            <summary>
              Declares a function returning a weibull distributed floating point random number.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Continuous.WeibullDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution">
            <summary>
              Provides generation of bernoulli distributed random numbers.
            </summary>
            <remarks>
              <para>
                The bernoulli distribution generates only discrete numbers. <br/> The implementation of
                the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> type bases upon information presented on
                <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.BernoulliDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.BernoulliDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of bernoulli distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of bernoulli distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero or greater than one.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of bernoulli distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0.0, and less than or
              equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.NextInt">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BernoulliDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.IsValidParam">
            <summary>
              Determines whether bernoulli distribution is defined under given parameter. The
              default definition returns true if alpha is greater than or equal to zero and less
              than or equal to one; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BernoulliDistribution.Sample">
            <summary>
              Declares a function returning a bernoulli distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.BernoulliDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Discrete.BinomialDistribution">
            <summary>
              Provides generation of binomial distributed random numbers.
            </summary>
            <remarks>
              <para>
                The binomial distribution generates only discrete numbers. <br/> The implementation of
                the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> type bases upon information presented on
                <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.BinomialDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.BinomialDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.BinomialDistribution._alpha">
            <summary>
              Stores the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.BinomialDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of binomial distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero or greater than one.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of binomial distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.#ctor(System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.#ctor(System.UInt32,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of binomial distributed random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of binomial distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than zero or greater than one, or
              <paramref name="beta"/> is less than zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0.0, and less than or
              equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.IsValidBeta(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.NextInt">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.BinomialDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.AreValidParams">
            <summary>
              Determines whether binomial distribution is defined under given parameters. The
              default definition returns true if alpha is greater than or equal to zero and less
              than or equal to one, and if beta is greater than or equal to zero; otherwise, it
              returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.BinomialDistribution.Sample">
            <summary>
              Declares a function returning a binomial distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Discrete.CategoricalDistribution">
            <summary>
              Implements the categorical distribution. For details about this distribution, see
              <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical
              distribution</a>. This distribution is sometimes called the Discrete distribution.
            </summary>
            <remarks>
              <para>
                The distribution is parameterized by a vector of ratios: in other words, the parameter
                does not have to be normalized and sum to 1. The reason is that some vectors can't be
                exactly normalized to sum to 1 in floating point representation.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.CategoricalDistribution.DefaultValueCount">
            <summary>
              The default number of values used for categorical distribution, if not specified otherwise.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.CategoricalDistribution._cdf">
            <summary>
              Stores the cumulative distribution of current normalized weights.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.CategoricalDistribution._weights">
            <summary>
              Stores the unnormalized categorical weights.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Weights">
            <summary>
              Gets or sets the normalized probability vector of the categorical distribution.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="value"/> are negative or they sum to zero.
            </exception>
            <remarks>
              Sometimes the normalized probability vector cannot be represented exactly in a
              floating point representation.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.CategoricalDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="weights"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(System.UInt32,System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.BinomialDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="weights"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.CategoricalDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="valueCount">
              The parameter valueCount which is used for generation of binomial distributed random
              numbers by setting the number of equi-distributed "weights" the distribution will have.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="valueCount"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.ICollection{System.Double})">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.CategoricalDistribution"/> class, using
              the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="weights">
              An enumerable of nonnegative weights: this enumerable does not need to be normalized
              as this is often impossible using floating point arithmetic.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="generator"/> or <paramref name="weights"/> are null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="weights"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Any of the weights in <paramref name="weights"/> are negative or they sum to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Ones(System.Int32)">
            <summary>
              Generates a list containing only ones.
            </summary>
            <param name="valueCount">The number of ones list will have.</param>
            <returns>A list containing only ones.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.AreValidWeights(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
              Determines whether categorical distribution is defined under given weights.
            </summary>
            <param name="weights">
              The weights which are used for generation of categorical distributed random numbers.
              Weights do not need to be normalized as this is often impossible using floating point arithmetic.
            </param>
            <returns>
              False if any of the weights is negative or if the sum of parameters is 0.0; otherwise,
              it returns true.
            </returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.UpdateHelpers">
            <summary>
              Computes the unnormalized cumulative distribution function and other attributes for
              the distribution (like mean, variance, and so on).
            </summary>
            <remarks>
              Also remember to change <see cref="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.SetUp(System.Int32,System.Collections.Generic.IEnumerable{System.Double},System.Double[]@)"/>
              when changing this method.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.NextInt">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.ToString">
            <summary>
              Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.IsValidParam">
            <summary>
              <para>
                Determines whether categorical distribution is defined under given weights. The
                default definition returns false if any of the weights is negative or if the sum of
                parameters is 0.0; otherwise, it returns true.
              </para>
              <para>
                Weights do not need to be normalized as this is often impossible using floating
                point arithmetic.
              </para>
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.CategoricalDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.CategoricalDistribution.Sample">
            <summary>
              Declares a function returning a categorical distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.CategoricalDistribution"/> class.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.SetUp(System.Int32,System.Collections.Generic.IEnumerable{System.Double},System.Double[]@)">
            <summary>
              Prepares parameters for TRandom (???).
            </summary>
            <param name="weightsCount">The number of weights.</param>
            <param name="weights">Weights, or null.</param>
            <param name="cdf">The output cdf.</param>
            <remarks>
              Also remember to change <see cref="M:ShaiRandom.Distributions.Discrete.CategoricalDistribution.UpdateHelpers"/> when changing this method.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution">
            <summary>
              Provides generation of discrete uniformly distributed random numbers.
            </summary>
            <remarks>
              <para>
                The discrete uniform distribution generates only discrete numbers. <br/> The
                implementation of the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> type bases upon
                information presented on
                <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">Wikipedia -
                Uniform distribution (discrete)</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution._alpha">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution._beta">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is greater than <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Beta"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of uniformly distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/> is greater than <paramref name="value"/>, or
              <paramref name="value"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.AreValidParams"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.#ctor(System.UInt32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using a <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class,
              using the specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of discrete uniform distributed
              random numbers.
            </param>
            <param name="beta">
              The parameter beta which is used for generation of discrete uniform distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is greater than <paramref name="beta"/>, or
              <paramref name="beta"/> is equal to <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.IsValidAlpha(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is less than or equal to <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Beta"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.IsValidBeta(System.Int32)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than or equal to <see cref="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Alpha"/>, and
              less than <see cref="F:System.Int32.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.NextInt">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.AreValidParams">
            <summary>
              Determines whether discrete uniform distribution is defined under given parameters.
              The default definition returns true if alpha is less than or equal to beta, and if
              beta is less than <see cref="F:System.Int32.MaxValue"/>; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution.Sample">
            <summary>
              Declares a function returning a discrete uniform distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.DiscreteUniformDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Discrete.GeometricDistribution">
            <summary>
              Provides generation of geometric distributed random numbers.
            </summary>
            <remarks>
              <para>
                The geometric distribution generates only discrete numbers. <br/> The implementation of
                the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> type bases upon information presented on
                <a href="http://en.wikipedia.org/wiki/Geometric_distribution">Wikipedia - Geometric
                distribution</a>. An earlier version used code from the Communication Networks Class Library, but nothing
                here requires its implementation, so that code was removed.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.GeometricDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.GeometricDistribution._alpha">
            <summary>
              Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of geometric distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero or it is greater than one.
            </exception>
            <remarks>
              Calls <see cref="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.IsValidParam"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="alpha">
              The parameter alpha which is used for generation of geometric distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="alpha"/> is less than or equal to zero or it is greater than one.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.IsValidAlpha(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is greater than 0.0, and less than or equal to 1.0;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.NextInt">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.GeometricDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.IsValidParam">
            <summary>
              Determines whether geometric distribution is defined under given parameter. The
              default definition returns true if alpha is greater than zero and if it is less than
              or equal to one; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.GeometricDistribution.Sample">
            <summary>
              Declares a function returning a geometric distributed 32-bit signed integer.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.GeometricDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.Discrete.PoissonDistribution">
            <summary>
              Provides generation of poisson distributed random numbers.
            </summary>
            <remarks>
              <para>
                The poisson distribution generates only discrete numbers. <br/> The implementation of
                the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> type bases upon information presented on
                <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Wikipedia - Poisson
                distribution</a>.
              </para>
              <para>The thread safety of this class depends on the one of the underlying generator.</para>
            </remarks>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.PoissonDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:ShaiRandom.Distributions.Discrete.PoissonDistribution._lambda">
            <summary>
              Stores the the parameter lambda which is used for generation of poisson distributed
              random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of poisson distributed
              random numbers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/> is less than or equal to zero.
            </exception>
            <remarks>
              Calls <see cref="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefore assignable.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.#ctor(System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> as underlying random number generator.
            </summary>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.#ctor(System.UInt32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class, using a
              <see cref="T:ShaiRandom.Generators.TrimRandom"/> with the specified seed value.
            </summary>
            <param name="seed">
              An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class, using the
              specified <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> as underlying random number generator.
            </summary>
            <param name="generator">An <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object.</param>
            <param name="lambda">
              The parameter lambda which is used for generation of poisson distributed random numbers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="lambda"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.IsValidLambda(System.Double)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.NextInt">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Discrete.PoissonDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.IsValidParam">
            <summary>
              Determines whether poisson distribution is defined under given parameter. The default
              definition returns true if lambda is greater than zero; otherwise, it returns false.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Distributions.Discrete.PoissonDistribution.Sample">
            <summary>
              Declares a function returning an Poisson distributed floating point random number.
              The implementation here is only meant for smaller lambda values.
            </summary>
            <remarks>
              This is an extensibility point for the <see cref="T:ShaiRandom.Distributions.Discrete.PoissonDistribution"/> class.
            </remarks>
        </member>
        <member name="T:ShaiRandom.Distributions.IAlphaDistribution`1">
            <summary>
              Models a distribution with an alpha parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.IAlphaDistribution`1.Alpha">
            <summary>
              Gets or sets the parameter alpha which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.IAlphaDistribution`1.IsValidAlpha(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.IAlphaDistribution`1.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.IAlphaDistribution`1.Alpha"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.IBetaDistribution`1">
            <summary>
              Models a distribution with a beta parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.IBetaDistribution`1.Beta">
            <summary>
              Gets or sets the parameter beta which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.IBetaDistribution`1.IsValidBeta(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.IBetaDistribution`1.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.IBetaDistribution`1.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.IContinuousDistribution">
            <summary>
              Declares common functionality for all continuous random number distributions.
            </summary>
        </member>
        <member name="T:ShaiRandom.Distributions.IDiscreteDistribution">
            <summary>
              Declares common functionality for all discrete random number distributions.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.IDiscreteDistribution.NextInt">
            <summary>
              Returns a distributed random number.
            </summary>
            <returns>A distributed 32-bit signed integer.</returns>
        </member>
        <member name="T:ShaiRandom.Distributions.IDistribution">
            <summary>
              Declares common functionality for all random number distributions.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.IDistribution.Generator">
            <summary>
              Gets the <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> object that is used as underlying random number generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.IDistribution.Maximum">
            <summary>
              Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.IDistribution.Mean">
            <summary>
              Gets the mean of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mean is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.IDistribution.Median">
            <summary>
              Gets the median of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if median is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.IDistribution.Minimum">
            <summary>
              Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.IDistribution.Mode">
            <summary>
              Gets the mode of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if mode is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="P:ShaiRandom.Distributions.IDistribution.Variance">
            <summary>
              Gets the variance of distributed random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException">
              Thrown if variance is not defined for given distribution with some parameters.
            </exception>
        </member>
        <member name="M:ShaiRandom.Distributions.IDistribution.NextDouble">
            <summary>
              Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="T:ShaiRandom.Distributions.IGammaDistribution`1">
            <summary>
              Models a distribution with a gamma parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.IGammaDistribution`1.Gamma">
            <summary>
              Gets or sets the parameter gamma which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.IGammaDistribution`1.IsValidGamma(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.IGammaDistribution`1.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.IGammaDistribution`1.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.ILambdaDistribution`1">
            <summary>
              Models a distribution with a lambda parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.ILambdaDistribution`1.Lambda">
            <summary>
              Gets or sets the parameter lambda which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.ILambdaDistribution`1.IsValidLambda(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.ILambdaDistribution`1.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.ILambdaDistribution`1.Lambda"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.IMuDistribution`1">
            <summary>
              Models a distribution with a mu parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.IMuDistribution`1.Mu">
            <summary>
              Gets or sets the parameter mu which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.IMuDistribution`1.IsValidMu(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.IMuDistribution`1.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.IMuDistribution`1.Mu"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.INuDistribution`1">
            <summary>
              Models a distribution with a nu parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.INuDistribution`1.Nu">
            <summary>
              Gets or sets the parameter nu which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.INuDistribution`1.IsValidNu(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.INuDistribution`1.Nu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.INuDistribution`1.Nu"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.ISigmaDistribution`1">
            <summary>
              Models a distribution with a sigma parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.ISigmaDistribution`1.Sigma">
            <summary>
              Gets or sets the parameter sigma which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.ISigmaDistribution`1.IsValidSigma(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.ISigmaDistribution`1.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.ISigmaDistribution`1.Sigma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.IThetaDistribution`1">
            <summary>
              Models a distribution with a theta parameter.
            </summary>
            <typeparam name="TNum">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.IThetaDistribution`1.Theta">
            <summary>
              Gets or sets the parameter theta which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.IThetaDistribution`1.IsValidTheta(`0)">
            <summary>
              Determines whether the specified value is valid for parameter <see cref="P:ShaiRandom.Distributions.IThetaDistribution`1.Theta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.IThetaDistribution`1.Theta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.IWeightsDistribution`1">
            <summary>
              Models a distribution with a weights parameter.
            </summary>
            <typeparam name="T">The numeric type of the parameter.</typeparam>
        </member>
        <member name="P:ShaiRandom.Distributions.IWeightsDistribution`1.Weights">
            <summary>
              Gets or sets the parameter weights which is used for generation of distributed random numbers.
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.IWeightsDistribution`1.AreValidWeights(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Determines whether specified values are valid for parameter <see cref="P:ShaiRandom.Distributions.IWeightsDistribution`1.Weights"/>.
            </summary>
            <param name="values">The values to check.</param>
            <returns>
              <see langword="true"/> if value is valid for parameter <see cref="P:ShaiRandom.Distributions.IWeightsDistribution`1.Weights"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1">
            <summary>
            Wraps an IContinuousDistribution to permit it to be used as an IDiscreteDistribution, by rounding the result of NextDouble().
            </summary>
            <typeparam name="T">Any IContinuousDistribution implementation.</typeparam>
        </member>
        <member name="M:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.#ctor(`0)">
            <summary>
            Creates a ToDiscreteWrapper that wraps the given continuous distribution.
            </summary>
            <param name="continuousDistribution">Any IContinuousDistribution implementation.</param>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.ContinuousDistribution">
            <summary>
            The continuous distribution this wraps.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.Generator">
            <summary>
            The IEnhancedRandom generator the distribution uses.
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.Maximum">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.Mean">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.Median">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.Minimum">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.Mode">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.Variance">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.NextInt">
            <summary>
            Returns the result of <see cref="M:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.NextDouble"/>, rounded to the nearest int using banker's rounding (MidpointRounding.ToEven).
            </summary>
            <remarks>
            You generally should consider adjusting the parameters on the wrapped distribution so it can return values other than 0 and 1 (which
            would be the only possible results if a distribution produces doubles in the 0 to 1 range).
            </remarks>
            <returns>An int produced by rounding a call to <see cref="M:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.NextDouble"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Distributions.Wrappers.ToDiscreteWrapper`1.NextDouble">
            <summary>
            Calls the wrapped distribution's NextDouble() method and returns its result verbatim.
            </summary>
            <returns>The wrapped distribution's NextDouble().</returns>
        </member>
        <member name="T:ShaiRandom.Generators.AbstractRandom">
            <summary>
            The abstract parent class of nearly all random number generators here.
            </summary>
            <remarks>
            Almost all subclasses of AbstractRandom should implement <see cref="M:ShaiRandom.Generators.AbstractRandom.SelectState(System.Int32)"/> so that individual states can be retrieved; this is used by many of
            the other methods here, and some of them throw exceptions if that method is not available. Similarly, <see cref="M:ShaiRandom.Generators.AbstractRandom.SetSelectedState(System.Int32,System.UInt64)"/> should
            be implemented to set specific states, especially if there is more than one state variable.
            </remarks>
        </member>
        <member name="F:ShaiRandom.Generators.AbstractRandom.FloatAdjust">
            <summary>
            2^-24; used in the process of creating a single-precision floating point value in range [0, 1) based on a ulong.
            </summary>
        </member>
        <member name="F:ShaiRandom.Generators.AbstractRandom.DoubleAdjust">
            <summary>
            2^-53; used in the process of creating a double-precision floating point value in range [0, 1) based on a ulong.
            </summary>
        </member>
        <member name="F:ShaiRandom.Generators.AbstractRandom.SeedingRandom">
            <summary>
            Used by <see cref="M:ShaiRandom.Generators.AbstractRandom.MakeSeed"/> to produce mid-low quality random numbers as a starting seed, as a "don't care" option for seeding.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.MakeSeed">
            <summary>
            Used by zero-argument constructors, typically, as a "don't care" option for seeding that creates a random ulong state.
            </summary>
            <returns>A random ulong from an unseeded random number generator, typically to be used as a random seed.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.Seed(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.AbstractRandom.StateCount">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.AbstractRandom.SupportsReadAccess">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.AbstractRandom.SupportsWriteAccess">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.AbstractRandom.SupportsSkip">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.AbstractRandom.SupportsLeap">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.AbstractRandom.SupportsPrevious">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.AbstractRandom.DefaultTag">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.StringSerialize">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.StringDeserialize(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.SelectState(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.SetSelectedState(System.Int32,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.SetState(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.SetState(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.SetState(System.UInt64,System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.SetState(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextLong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextULong(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextULong(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextLong(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextBits(System.Int32)">
             <summary>
             Generates the next pseudorandom number with a specific maximum size in bits (not a max number).
             </summary>
             <remarks>
             If you want to get a random number in a range, you should usually use <see cref="M:ShaiRandom.Generators.AbstractRandom.NextUInt(System.UInt32)"/> instead.
             However, for some specific cases, this method is more efficient and less biased than <see cref="M:ShaiRandom.Generators.AbstractRandom.NextUInt(System.UInt32)"/>
             If you know you need a number from a range from 0 (inclusive) to a power of two (exclusive), you can use this method optimally.
             <br/>
             Note that you can give this values for bits that are outside its expected range of 1 to 32,
             but the value used, as long as bits is positive, will effectively be <code>bits % 32</code>. As stated
             before, a value of 0 for bits is the same as a value of 32.
             </remarks>
             <param name="bits">The amount of random bits to request, from 1 to 32.</param>
             <returns>The next pseudorandom value from this random number generator's sequence.</returns>
            
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextBytes(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInt">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextUInt">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextUInt(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextUInt(System.UInt32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextBool">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextFloat(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextDouble(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextDouble(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextSparseFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextSparseFloat(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextSparseDouble(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextSparseDouble(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveDouble(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveDouble(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveFloat(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveDecimal">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveDecimal(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextInclusiveDecimal(System.Decimal,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble">
            <summary>
            Gets a random double between 0.0 and 1.0, exclusive at both ends, using a technique that can produce more of the valid values for a double
            (near to 0) than other methods.
            </summary>
            <remarks>
            The code for this is small, but extremely unorthodox. The technique is related to <a href="https://allendowney.com/research/rand/">this algorithm by Allen Downey</a>,
            but because the ability to get the number of leading or trailing zeros is in a method not present in .NET Standard, we get close to that by using
            <see cref="M:System.BitConverter.DoubleToInt64Bits(System.Double)"/> on a negative long and using its exponent bits directly. The smallest double this can return is 1.0842021724855044E-19 ; the largest it
            can return is 0.9999999999999999 . The smallest result is significantly closer to 0 than <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDouble"/> can produce without actually returning 0.
            <br/>If you decide to edit this, be advised: here be dragons.
            </remarks>
            <returns>A double between 0.0 and 1.0, exclusive at both ends.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveFloat(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDecimal">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDecimal(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDecimal(System.Decimal,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextDecimal">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextDecimal(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.NextDecimal(System.Decimal,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.Skip(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.Leap">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.PreviousULong">
            <summary>
            (Optional) If implemented, jumps the generator back to the previous state and returns what NextULong() would have produced at that state.
            </summary>
            <remarks>
            The default implementation calls <see cref="M:ShaiRandom.Generators.AbstractRandom.Skip(System.UInt64)"/> with the equivalent of (ulong)(-1L) . If Skip() is not implemented, this throws a NotSupportedException.
            Be aware that if Skip() has a non-constant-time implementation, the default here will generally take the most time possible for that method.
            </remarks>
            <returns>The result of what NextULong() would return at the previous state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.AbstractRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.DistinctRandom">
            <summary>
            It's an AbstractRandom with 1 state that only returns each ulong result exactly once over its period.
            </summary>
            <remarks>
            This generator supports <see cref="M:ShaiRandom.Generators.DistinctRandom.Skip(System.UInt64)"/>, along with all other optional operations except <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>
            It is very similar to Java 8's SplittableRandom, though not identical, and only if using one stream of that generator.
            It uses the same pattern of generation; add a large odd constant to the state, then run the value of that state through a
            unary hash (SplittableRandom uses something close to murmurhash3's finalizer; this uses a similar function that is better
            in some measurable ways) and return the hash' result.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.DefaultTag">
            <summary>
            The identifying tag here is "DisR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.State">
            <summary>
            The first state; can be any ulong.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.#ctor">
            <summary>
            Creates a new DistinctRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new DistinctRandom with the given state; any ulong value is permitted.
            </summary>
            <remarks>
            The seed will be used verbatim as the State.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.StateCount">
            <summary>
            This generator has 1 ulong state, so this returns 1.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.DistinctRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.DistinctRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.SupportsSkip">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.DistinctRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.DistinctRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.SelectState(System.Int32)">
            <summary>
            Gets the state, regardless of selection, as-is.
            </summary>
            <param name="selection">Ignored.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets the State, regardless of selection, to value, as-is.
            </summary>
            <param name="selection">Ignored</param>
            <param name="value">The exact value to use for the State.</param>
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.Seed(System.UInt64)">
            <summary>
            This initializes the states of the generator to the given seed, exactly.
            </summary>
            <remarks>
            All (2 to the 64) possible initial generator states can be produced here.
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.SetState(System.UInt64)">
            <summary>
            This initializes the states of the generator to the given seed, exactly.
            </summary>
            <remarks>
            All (2 to the 64) possible initial generator states can be produced here.
            This is the same as calling <see cref="M:ShaiRandom.Generators.DistinctRandom.Seed(System.UInt64)">Seed(ulong)</see>.
            </remarks>
            <param name="state">The initial state value; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.Skip(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.DistinctRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.FourWheelRandom">
            <summary>
            It's an AbstractRandom with 4 states, built around a "chaotic" construction with no guarantee of a minimum period, but likely to be a very long one.
            </summary>
            <remarks>
            This is very fast... on the JVM. It isn't nearly as fast on .NET (any version), because smaller state sizes do better here. It's still fairly high-quality,
            with only one known failing test, and it only failed after 300PB of data were processed (an extinction-saturation test; suspect results occurred earlier).
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.DefaultTag">
            <summary>
            The identifying tag here is "FoWR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.StateA">
            <summary>
            The first state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.StateB">
            <summary>
            The second state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.StateC">
            <summary>
            The third state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.StateD">
            <summary>
            The fourth state; can be any ulong.
            </summary>
            <remarks>If this has just been set to some value, then the next call to <see cref="M:ShaiRandom.Generators.FourWheelRandom.NextULong">NextUlong()</see> will return that value as-is. Later calls will be more random.</remarks>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.#ctor">
            <summary>
            Creates a new FourWheelRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new FourWheelRandom with the given seed; all ulong values are permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.FourWheelRandom.SetSeed(ShaiRandom.Generators.FourWheelRandom,System.UInt64)">SetSeed(FourWheelRandom, ulong)</see>, to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new FourWheelRandom with the given four states; all ulong values are permitted.
            </summary>
            <remarks>
            The states will be used verbatim.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
            <param name="stateD">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.StateCount">
            <summary>
            This generator has 4 ulong states, so this returns 4.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.FourWheelRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.FourWheelRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.FourWheelRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.FourWheelRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 3, inclusive; if it is any other value this gets state D as if 3 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, 2, or 3.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, 2, and 3 refer to states A, B, C, and D,  and if the selection is anything else, this treats it as 3 and sets stateD.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, 2, or 3.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.Seed(System.UInt64)">
            <summary>
            Initializes all 4 states of the generator to random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here, all with a different first value returned
            by <see cref="M:ShaiRandom.Generators.FourWheelRandom.NextULong">NextUlong()</see> (because stateD is guaranteed to be different for every different seed).
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given four state variables.
            </summary>
            <remarks>
            This is the same as setting StateA, StateB, StateC, and StateD as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.FourWheelRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the value for stateD (in particular) is already adequately random; the first call to NextULong(), if it is made immediately after calling this, will return stateD as-is.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any ulong.</param>
            <param name="stateC">The third state; can be any ulong.</param>
            <param name="stateD">The fourth state; this will be returned as-is if the next call is to NextULong().</param>
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.FourWheelRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.IEnhancedRandom">
            <summary>
            The interface view of the functionality typically provided by <see cref="T:ShaiRandom.Generators.AbstractRandom"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.Seed(System.UInt64)">
            <summary>
            Sets the seed of this random number generator using a single ulong seed.
            </summary>
            <remarks>
            This does not necessarily assign the state variable(s) of the implementation with the exact contents of seed,
            so <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SelectState(System.Int32)"/> should not be expected to return seed after this, though it may.
            </remarks>
            <param name="seed">May be any ulong; if the seed would give an invalid state, the generator is expected to correct that state.</param>
        </member>
        <member name="P:ShaiRandom.Generators.IEnhancedRandom.StateCount">
            <summary>
            Gets the number of possible state variables that can be selected with
            <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SelectState(System.Int32)"/> or <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/>,
            even if those methods are not publicly accessible. An implementation that has only
            one ulong or uint state, like <see cref="T:ShaiRandom.Generators.DistinctRandom"/>, should produce 1.
            An implementation that has two uint or ulong states should produce 2, etc.
            This is always a non-negative number; though discouraged, it is allowed to be 0 for
            generators that attempt to conceal their state.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.IEnhancedRandom.SupportsReadAccess">
            <summary>
            This should be true if the implementation supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SelectState(System.Int32)"/>, or false if that method is unsupported.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.IEnhancedRandom.SupportsWriteAccess">
            <summary>
            This should be true if the implementation supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/>, or false if that method is unsupported.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.IEnhancedRandom.SupportsSkip">
            <summary>
            This should be true if the implementation supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>, or false if that method is unsupported.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.IEnhancedRandom.SupportsLeap">
            <summary>
            This should be true if the implementation supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>, or false if that method is unsupported.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.IEnhancedRandom.SupportsPrevious">
            <summary>
            This should be true if the implementation supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>, or false if that method is unsupported.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag">
            <summary>
            The string that may identify this IEnhancedRandom for serialization purposes, if no specific string is specified
            when the generator is registered with the serializer.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.Copy">
            <summary>
            Returns a full copy (deep, if necessary) of this IEnhancedRandom.
            </summary>
            <returns>A copy of this IEnhancedRandom.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.StringSerialize">
            <summary>
            Produces a string that encodes the type and full state of this generator.
            This is an optional operation for classes that only implement IEnhancedRandom; AbstractRandom strongly encourages but does not require an implementation.
            </summary>
            <returns>An encoded string that stores the type and full state of this generator.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.StringDeserialize(System.ReadOnlySpan{System.Char})">
            <summary>
            Given data from a string produced by <see cref="M:ShaiRandom.Generators.IEnhancedRandom.StringSerialize"/>, if the specified type is compatible,
            then this method sets the state of this IEnhancedRandom to the specified stored state.
            This is an optional operation for classes that only implement IEnhancedRandom; AbstractRandom strongly encourages but does not require an implementation.
            </summary>
            <remarks>
            It is more common to call <see cref="M:ShaiRandom.Serializer.Deserialize(System.ReadOnlySpan{System.Char})"/> when the exact variety of IEnhancedRandom is not known.
            </remarks>
            <param name="data">Data from a string produced by StringSerialize.</param>
            <returns>This IEnhancedRandom, after modifications.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.SelectState(System.Int32)">
            <summary>
            Gets a selected state value from this AbstractRandom, by index.
            </summary>
            <remarks>
            The number of possible selections is up to the implementing class, and is accessible via <see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/>, but negative values for selection are typically not tolerated.
            This should return the exact value of the selected state, assuming it is implemented. The default implementation throws an NotSupportedException, and implementors only have to
            allow reading the state if they choose to implement this differently. If this method is intended to be used, <see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/> must also be implemented.
            </remarks>
            <param name="selection">The index of the state to retrieve.</param>
            <returns>The value of the state corresponding to selection</returns>
            <exception cref="T:System.NotSupportedException">If the generator does not allow reading its state.</exception>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets a selected state value to the given ulong value.
            </summary>
            <remarks>
            The number of possible selections is up to the implementing class, but selection should be at least 0 and less than <see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/>.
            Implementors are permitted to change value if it is not valid, but they should not alter it if it is valid.
            The basic implementation in AbstractRandom calls <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Seed(System.UInt64)"/> with value, which doesn't need changing if the generator has one state that is set verbatim by Seed().
            Otherwise, this method should be implemented when <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SelectState(System.Int32)"/> is and the state is allowed to be set by users.
            Having accurate ways to get and set the full state of a random number generator makes it much easier to serialize and deserialize that class.
            </remarks>
            <param name="selection">The index of the state to set.</param>
            <param name="value">The value to try to use for the selected state.</param>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.SetState(System.UInt64)">
            <summary>
            Sets every state variable to the given state.
            </summary>
            <remarks>
            If <see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/> is 1, then this should set the whole state to the given value using <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            If StateCount is more than 1, then all states will be set in the same way (using SetSelectedState(), all to state).
            </remarks>
            <param name="state">The ulong variable to use for every state variable.</param>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.SetState(System.UInt64,System.UInt64)">
            <summary>
            Sets each state variable to either stateA or stateB, alternating.
            </summary>
            <remarks>
            This uses <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/> to set the values.
            If there is one state variable (<see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/> is 1), then this only sets that state variable to stateA.
            If there are two state variables, the first is set to stateA, and the second to stateB.
             there are more, it reuses stateA, then stateB, then stateA, and so on until all variables are set.
            </remarks>
            <param name="stateA">The ulong value to use for states at index 0, 2, 4, 6...</param>
            <param name="stateB">The ulong value to use for states at index 1, 3, 5, 7...</param>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.SetState(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets each state variable to stateA, stateB, or stateC, alternating.
            </summary>
            <remarks>
            This uses <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/> to set the values.
            If there is one state variable (<see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/> is 1), then this only
            sets that state variable to stateA. If there are two state variables, the first
            is set to stateA, and the second to stateB. With three state variables, the
            first is set to stateA, the second to stateB, and the third to stateC. If there
            are more, it reuses stateA, then stateB, then stateC, then stateA, and so on
            until all variables are set.
            </remarks>
            <param name="stateA">The ulong value to use for states at index 0, 3, 6, 9...</param>
            <param name="stateB">The ulong value to use for states at index 1, 4, 7, 10...</param>
            <param name="stateC">The ulong value to use for states at index 2, 5, 8, 11...</param>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets each state variable to stateA, stateB, stateC, or stateD, alternating.
            </summary>
            <remarks>
            This uses <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/> to
            set the values. If there is one state variable (<see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/> is 1),
            then this only sets that state variable to stateA. If there are two state
            variables, the first is set to stateA, and the second to stateB. With three
            state variables, the first is set to stateA, the second to stateB, and the third
            to stateC. With four state variables, the first is set to stateA, the second to
            stateB, the third to stateC, and the fourth to stateD. If there are more, it
            reuses stateA, then stateB, then stateC, then stateD, then stateA, and so on
            until all variables are set.
            </remarks>
            <param name="stateA">the ulong value to use for states at index 0, 4, 8, 12...</param>
            <param name="stateB">the ulong value to use for states at index 1, 5, 9, 13...</param>
            <param name="stateC">the ulong value to use for states at index 2, 6, 10, 14...</param>
            <param name="stateD">the ulong value to use for states at index 3, 7, 11, 15...</param>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.SetState(System.UInt64[])">
            <summary>
            Sets all state variables to alternating values chosen from states. If states is empty,
            then this does nothing, and leaves the current generator unchanged. This works for
            generators with any <see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/>, but may allocate an array if states is
            used as a varargs (you can pass an existing array without needing to allocate). This
            uses <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/> to change the states.
            </summary>
            <param name="states">an array or varargs of ulong values to use as states</param>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextULong">
            <summary>
            Can return any ulong.
            </summary>
            <returns>A random ulong, which can have any ulong value.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextLong">
            <summary>
            Can return any long, positive or negative.
            If you specifically want a non-negative long, you can use <code>(NextLong() &amp; long.MaxValue)</code>,
            which can return any long that is not negative.
            </summary>
            <returns>A random long, which may be positive or negative, and can have any long value.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextULong(System.UInt64)">
            <summary>
            Returns a pseudorandom, uniformly distributed ulong value
            between 0 (inclusive) and the specified value (exclusive), drawn from
            this random number generator's sequence.
            </summary>
            <remarks>
            The general contract of
            nextULong is that one ulong value in the specified range
            is pseudorandomly generated and returned.  All bound possible
            ulong values are produced with (approximately) equal
            probability, though there may be a small amount of bias depending on the
            implementation and the bound. To generate an ulong that is inclusive on <see cref="F:System.UInt64.MaxValue"/>,
            use <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong"/>.
            </remarks>
            <param name="bound">the outer bound (exclusive). If 0, this always returns 0.</param>
            <returns>the next pseudorandom, uniformly distributed ulong
            value between zero (inclusive) and bound (exclusive)
            from this random number generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextLong(System.Int64)">
            <summary>
            Returns a pseudorandom, uniformly distributed long value between an
            inner bound of 0 (inclusive) and the specified outerBound (exclusive).
            </summary>
            <remarks>
            To generate a long that is inclusive on <see cref="F:System.Int64.MaxValue"/>,
            use: <code>(NextLong() &amp; long.MaxValue)</code></remarks>
            <param name="outerBound">the outer bound (exclusive). If 0, this always returns 0. If negative, returns a non-positive result.</param>
            <returns>a pseudorandom long between 0 (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextULong(System.UInt64,System.UInt64)">
            <summary>
            Returns a pseudorandom, uniformly distributed ulong value between the
            specified inner bound (inclusive) and the specified outer bound
            (exclusive). If outer is less than inner,
            this still returns a value between the two, and inner is still inclusive,
            while outer is still exclusive. If outer and inner are equal, this returns inner.
            </summary>
            <param name="inner">the inclusive inner bound; may be any ulong</param>
            <param name="outer">the exclusive outer bound; may be any ulong, including less than inner</param>
            <returns>a pseudorandom ulong between inner (inclusive) and outer (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextLong(System.Int64,System.Int64)">
            <summary>
            Returns a pseudorandom, uniformly distributed long value between the
            specified inner bound (inclusive) and the specified outer bound
            (exclusive). If outer is less than inner,
            this still returns a value between the two, and inner is still inclusive,
            while outer is still exclusive. If outer and inner are equal, this returns inner.
            </summary>
            <param name="inner">the inclusive inner bound; may be any long, allowing negative</param>
            <param name="outer">the exclusive outer bound; may be any long, allowing negative</param>
            <returns>a pseudorandom long between inner (inclusive) and outer (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextBits(System.Int32)">
            <summary>
            Generates the next pseudorandom uint with a specific maximum size in bits (not a max number).
            </summary>
            <remarks>
            If you want to get a random number in a range, you should usually use <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextInt(System.Int32)"/> instead.
            <br/>The general contract of next is that it returns an
            uint value and if the argument bits is between
            1 and 32 (inclusive), then that many low-order
            bits of the returned value will be (approximately) independently
            chosen bit values, each of which is (approximately) equally
            likely to be 0 or 1. Implementations typically draw the returned bits
            from the high-order (or low-order) bits of a generated uint or ulong.
            AbstractRandom draws from the high-order bits of an ulong.
            <br/>
            Note that you can give this values for bits that are outside its expected range of 1 to 32,
            but the value used, as long as bits is positive, will effectively be <code>bits % 32</code>. As stated
            before, a value of 0 for bits is the same as a value of 32.
            </remarks>
            <param name="bits">the amount of random bits to request, from 1 to 32</param>
            <returns>the next pseudorandom value from this random number
            generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextBytes(System.Span{System.Byte})">
             <summary>
             Generates random bytes and places them into a user-supplied
             span.  The number of random bytes produced is equal to
             the length of the span.
             </summary>
             <remarks>
             Note that this function can easily accept an array as well, or anything else that can convert to span either
             via either implicit or explicit conversion.  It can also fill only part of any such array or structure
             (see examples).
             <example>
             <code>
             // Fill whole array
             myRng.NextBytes(myArray);
             </code>
             </example>
            
             <example>
             <code>
             // Fill the three elements starting at index 1
             myRng.NextBytes(myArray.AsSpan(1, 3));
             </code>
             </example>
            
             <example>
             <code>
             // Fill all elements from index 1 to (but not including) the last element
             myRng.NextBytes(myArray.AsSpan(1..^1));
             </code>
             </example>
             </remarks>
             <param name="bytes">The Span to fill with random bytes.</param>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInt">
            <summary>
            Returns the next pseudorandom, uniformly distributed int
            value from this random number generator's sequence.
            </summary>
            <remarks>
            The general
            contract of nextInt is that one int value is
            pseudorandomly generated and returned. All 2<sup>32</sup> possible
            int values are produced with (approximately) equal probability.
            </remarks>
            <returns>the next pseudorandom, uniformly distributed int
            value from this random number generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt">
            <summary>
            Gets a random uint by using the low 32 bits of NextULong(); this can return any uint.
            </summary>
            <remarks>
            All 2<sup>32</sup> possible
            uint values are produced with (approximately) equal probability.</remarks>
            <returns>Any random uint.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt(System.UInt32)">
            <summary>
            Returns a pseudorandom, uniformly distributed uint value
            between 0 (inclusive) and the specified value (exclusive), drawn from
            this random number generator's sequence.</summary>
            <remarks>The general contract of
            nextUInt is that one uint value in the specified range
            is pseudorandomly generated and returned.  All possible uint
            values less than bound are produced with (approximately) equal
            probability. To generate an uint that is inclusive on <see cref="F:System.UInt32.MaxValue"/>,
            use <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt"/>.
            <br/>
            It should be mentioned that the technique this uses has some bias, depending
            on bound, but it typically isn't measurable without specifically looking
            for it. Using the method this does allows this method to always advance the state
            by one step, instead of a varying and unpredictable amount with the more typical
            ways of rejection-sampling random numbers and only using numbers that can produce
            an int within the bound without bias.
            See <a href="https://www.pcg-random.org/posts/bounded-rands.html">M.E. O'Neill's
            blog about random numbers</a> for discussion of alternative, unbiased methods.
            </remarks>
            <param name="bound">the upper bound (exclusive). If 0 or 1, this always returns 0.</param>
            <returns>the next pseudorandom, uniformly distributed uint
            value between zero (inclusive) and bound (exclusive)
            from this random number generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInt(System.Int32)">
            <summary>
            Returns a pseudorandom, uniformly distributed int value between an
            inner bound of 0 (inclusive) and the specified outerBound (exclusive).
            </summary>
            <remarks>
            If outerBound is less than or equal to 0,
            this always returns 0. To generate an int that is inclusive on <see cref="F:System.Int32.MaxValue"/>,
            use <code>(NextInt() &amp; int.MaxValue)</code>
            To generate any int, including negative ones, use <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextInt">NextInt()</see>.
            </remarks>
            <seealso cref="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt(System.UInt32)"> Here's a note about the bias present in the bounded generation.</seealso>
            <param name="outerBound">the outer exclusive bound; may be any int value, allowing negative</param>
            <returns>a pseudorandom int between 0 (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt(System.UInt32,System.UInt32)">
            <summary>
            Returns a pseudorandom, uniformly distributed uint value between the
            specified innerBound (inclusive) and the specified outerBound
            (exclusive).
            </summary>
            <remarks>
            If outer is less than inner,
            this still returns a value between the two, and inner is still inclusive,
            while outer is still exclusive. If outer and inner are equal, this returns inner.
            </remarks>
            <seealso cref="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt(System.UInt32)"> Here's a note about the bias present in the bounded generation.</seealso>
            <param name="innerBound">the inclusive inner bound; may be any int, allowing negative</param>
            <param name="outerBound">the exclusive outer bound; must be greater than innerBound (otherwise this returns innerBound)</param>
            <returns>a pseudorandom uint between innerBound (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInt(System.Int32,System.Int32)">
            <summary>
            Returns a pseudorandom, uniformly distributed int value between the
            specified innerBound (inclusive) and the specified outerBound
            (exclusive).</summary>
            <remarks>
            If outer is less than inner,
            this still returns a value between the two, and inner is still inclusive,
            while outer is still exclusive. If outer and inner are equal, this returns inner.
            </remarks>
            <seealso cref="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt(System.UInt32)"> Here's a note about the bias present in the bounded generation.</seealso>
            <param name="innerBound">the inclusive inner bound; may be any int, allowing negative</param>
            <param name="outerBound">the exclusive outer bound; may be any int, allowing negative</param>
            <returns>a pseudorandom int between innerBound (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextBool">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            bool value from this random number generator's
            sequence. The general contract of NextBool is that one
            bool value is pseudorandomly generated and returned.  The
            values true and false are produced with
            (approximately) equal probability.
            </summary>
            <remarks>
            A typical implementation is equivalent to a sign check on <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextLong"/>,
            returning true if the generated long is negative. This is typically the safest
            way to implement this method; many types of generators have less statistical
            quality on their lowest bit, so just returning based on the lowest bit isn't
            always a good idea.
            </remarks>
            <returns>the next pseudorandom, uniformly distributed</returns>
            bool value from this random number generator's
            sequence
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat">
            <summary>
            Returns the next pseudorandom, uniformly distributed float
            value between 0.0 (inclusive) and 1.0 (exclusive)
            from this random number generator's sequence.
            </summary>
            <remarks>The general contract of NextFloat is that one
            float value, chosen (approximately) uniformly from the
            range 0.0f (inclusive) to 1.0f (exclusive), is
            pseudorandomly generated and returned. All 2<sup>24</sup> possible
            float values of the form <i>m x </i>2<sup>-24</sup>,
            where <i>m</i> is a positive integer less than 2<sup>24</sup>, are
            produced with (approximately) equal probability.
            <br/>
            AbstractRandom's implementation uses the upper 24 bits of <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong"/>,
            with a right shift and a multiply by a very small float
            (5.9604645E-8f). It tends to be fast if
            NextULong() is fast, but alternative implementations could use 24 bits of
            <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextInt"/> (or just <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextBits(System.Int32)"/>, giving it 24)
            if that generator doesn't efficiently generate 64-bit longs.</remarks>
            <returns>the next pseudorandom, uniformly distributed float
            value between 0.0 and 1.0 from this
            random number generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single)">
            <summary>
            Gets a pseudo-random float between 0 (inclusive) and outerBound (exclusive).
            The outerBound may be positive or negative.
            </summary>
            <remarks>
            Exactly the same as: <code>NextFloat() * outerBound</code>
            </remarks>
            <param name="outerBound">the exclusive outer bound</param>
            <returns>a float between 0 (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single,System.Single)">
            <summary>
            Gets a pseudo-random float between innerBound (inclusive) and outerBound (exclusive).
            Either, neither, or both of innerBound and outerBound may be negative; this does not change which is
            inclusive and which is exclusive.
            </summary>
            <param name="innerBound">the inclusive inner bound; may be negative</param>
            <param name="outerBound">the exclusive outer bound; may be negative</param>
            <returns>a float between innerBound (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            double value between 0.0 (inclusive) and 1.0
            (exclusive) from this random number generator's sequence.
            </summary>
            <remarks>
            The general contract of NextDouble is that one
            double value, chosen (approximately) uniformly from the
            range 0.0 (inclusive) to 1.0 (exclusive), is
            pseudorandomly generated and returned.
            <br/>The default implementation uses the upper 53 bits of <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong"/>,
            with a right shift and a multiply by a very small double
            (1.1102230246251565E-16). It should perform well
            if nextULong() performs well, and is expected to perform less well if the
            generator naturally produces 32 or fewer bits at a time.
            </remarks>
            <returns>the next pseudorandom, uniformly distributed double
            value between 0.0 and 1.0 from this
            random number generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double)">
            <summary>
            Gets a pseudo-random double between 0 (inclusive) and outerBound (exclusive).
            The outerBound may be positive or negative.
            </summary>
            <remarks>
            Exactly the same as: <code>NextDouble() * outerBound</code>
            </remarks>
            <param name="outerBound">the exclusive outer bound</param>
            <returns>a double between 0 (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double,System.Double)">
            <summary>
            Gets a pseudo-random double between innerBound (inclusive) and outerBound (exclusive).
            Either, neither, or both of innerBound and outerBound may be negative; this does not change which is
            inclusive and which is exclusive.
            </summary>
            <param name="innerBound">the inclusive inner bound; may be negative</param>
            <param name="outerBound">the exclusive outer bound; may be negative</param>
            <returns>a double between innerBound (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextSparseFloat">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            float value between 0.0 (inclusive) and 1.0
            (exclusive) from this random number generator's sequence.
            Optimized for speed over quality.
            </summary>
            <remarks>
            The general contract of NextSparseFloat is that one
            float value, chosen (approximately) uniformly from the
            range 0.0 (inclusive) to 1.0 (exclusive), is
            pseudorandomly generated and returned. Unlike other
            float generators, this is not required to be capable of
            returning all possible float values, and most implementations
            will only be capable of returning half of the possible
            range of floats between 0.0 and 1.0 (every other float,
            separated by a tiny amount, won't be generated ever).
            <br/>The default implementation uses the upper 23 bits of <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong"/>,
            with a right shift and some bitwise conversions.
            It should be faster than <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat"/>
            in many cases, though it sacrifices quality.
            </remarks>
            <returns>the next pseudorandom, uniformly distributed float
            value between 0.0 and 1.0 from this
            random number generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextSparseFloat(System.Single)">
            <summary>
            Gets a pseudo-random float between 0 (inclusive) and outerBound (usually exclusive).
            The outerBound may be positive or negative, and this tries to keep it exclusive but
            can't guarantee that. Optimized for speed over quality.
            </summary>
            <remarks>
            Exactly the same as: <code>NextSparseFloat() * outerBound</code>
            </remarks>
            <param name="outerBound">the exclusive outer bound</param>
            <returns>a float between 0 (inclusive) and outerBound (usually exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextSparseFloat(System.Single,System.Single)">
            <summary>
            Gets a pseudo-random float between innerBound (inclusive) and outerBound (usually exclusive).
            Either, neither, or both of innerBound and outerBound may be negative; this does not change which is
            inclusive and which is exclusive. Optimized for speed over quality.
            </summary>
            <remarks>
            This tried to respect the exclusivity of outerBound, but isn't always able to. Unlike
            <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single,System.Single)"/>, this won't change the result if it is out of
            bounds, so use this carefully.
            </remarks>
            <param name="innerBound">the inclusive inner bound; may be negative</param>
            <param name="outerBound">the exclusive outer bound; may be negative</param>
            <returns>a float between innerBound (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextSparseDouble">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            double value between 0.0 (inclusive) and 1.0
            (exclusive) from this random number generator's sequence.
            Optimized for speed over quality.
            </summary>
            <remarks>
            The general contract of NextSparseDouble is that one
            double value, chosen (approximately) uniformly from the
            range 0.0 (inclusive) to 1.0 (exclusive), is
            pseudorandomly generated and returned. Unlike other
            double generators, this is not required to be capable of
            returning all possible double values, and most implementations
            will only be capable of returning half of the possible
            range of doubles between 0.0 and 1.0 (every other double,
            separated by a tiny amount, won't be generated ever).
            <br/>The default implementation uses the upper 52 bits of <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong"/>,
            with a right shift and some bitwise conversions.
            It should be faster than <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble"/>
            in many cases, though it sacrifices quality.
            </remarks>
            <returns>the next pseudorandom, uniformly distributed double
            value between 0.0 and 1.0 from this
            random number generator's sequence</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextSparseDouble(System.Double)">
            <summary>
            Gets a pseudo-random double between 0 (inclusive) and outerBound (usually exclusive).
            The outerBound may be positive or negative, and this tries to keep it exclusive but
            can't guarantee that. Optimized for speed over quality.
            </summary>
            <remarks>
            Exactly the same as: <code>NextSparseDouble() * outerBound</code>
            </remarks>
            <param name="outerBound">the exclusive outer bound</param>
            <returns>a double between 0 (inclusive) and outerBound (usually exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextSparseDouble(System.Double,System.Double)">
            <summary>
            Gets a pseudo-random double between innerBound (inclusive) and outerBound (usually exclusive).
            Either, neither, or both of innerBound and outerBound may be negative; this does not change which is
            inclusive and which is exclusive. Optimized for speed over quality.
            </summary>
            <remarks>
            This tried to respect the exclusivity of outerBound, but isn't always able to. Unlike
            <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double,System.Double)"/>, this won't change the result if it is out of
            bounds, so use this carefully.
            </remarks>
            <param name="innerBound">the inclusive inner bound; may be negative</param>
            <param name="outerBound">the exclusive outer bound; may be negative</param>
            <returns>a double between innerBound (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal">
            <summary>
            Returns the next pseudorandom, rather-uniformly distributed
            decimal value between 0.0M (inclusive) and 1.0M
            (exclusive) from this random number generator's sequence.
            </summary>
            <returns>A rather-uniform random decimal between 0.0M inclusive and 1.0M exclusive.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal(System.Decimal)">
            <summary>
            Gets a pseudo-random float between 0M (inclusive) and outerBound (exclusive).
            The outerBound may be positive or negative.
            </summary>
            <remarks>
            Exactly the same as: <code>NextDecimal() * outerBound</code>
            </remarks>
            <param name="outerBound">the exclusive outer bound</param>
            <returns>a decimal between 0 (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Gets a pseudo-random decimal between innerBound (inclusive) and outerBound (exclusive).
            Either, neither, or both of innerBound and outerBound may be negative; this does not change which is
            inclusive and which is exclusive.
            </summary>
            <param name="innerBound">the inclusive inner bound; may be negative</param>
            <param name="outerBound">the exclusive outer bound; may be negative</param>
            <returns>a decimal between innerBound (inclusive) and outerBound (exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveDouble">
            <summary>
            This is just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble"/>, returning a double between 0 and 1, except that it is inclusive on both 0.0 and 1.0.
            </summary>
            <remarks>
            It returns 1.0 extremely rarely, 0.000000000000011102230246251565% of the time if there is no bias in the generator, but it
            can happen. This typically uses <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong(System.UInt64)"/> internally, so it may have some bias towards or against specific
            subtly-different results.
            </remarks>
            <returns>a double between 0.0, inclusive, and 1.0, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveDouble(System.Double)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double)"/>, but this is inclusive on both 0.0 and outerBound.
            </summary>
            <remarks>
            It may be important to note that this returns outerBound on only 0.000000000000011102230246251565% of calls.
            </remarks>
            <param name="outerBound">the outer inclusive bound; may be positive or negative</param>
            <returns>a double between 0.0, inclusive, and outerBound, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveDouble(System.Double,System.Double)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double,System.Double)"/>, but this is inclusive on both innerBound and outerBound.
            </summary>
            <remarks>
            It may be important to note that this returns outerBound on only 0.000000000000011102230246251565% of calls, if it can
            return it at all because of floating-point imprecision when innerBound is a larger number.
            </remarks>
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer inclusive bound; may be positive or negative</param>
            <returns>a double between innerBound, inclusive, and outerBound, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveFloat">
            <summary>
            This is just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat"/>, returning a float between 0 and 1, except that it is inclusive on both 0.0 and 1.0.
            </summary>
            <remarks>
            It returns 1.0 rarely, 0.00000596046412226771% of the time if there is no bias in the generator, but it can happen. This method
            has been tested by generating 268435456 (or 0x10000000) random ints with <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextInt(System.Int32)"/>, and just before the end of that
            it had generated every one of the 16777217 roughly-equidistant floats this is able to produce. Not all seeds and streams are
            likely to accomplish that in the same time, or at all, depending on the generator.
            </remarks>
            <returns>a float between 0.0, inclusive, and 1.0, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveFloat(System.Single)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single)"/>, but this is inclusive on both 0.0 and outerBound.
            </summary>
            <remarks>
            It may be important to note that it returns outerBound on only 0.00000596046412226771% of calls.
            </remarks>
            <param name="outerBound">the outer inclusive bound; may be positive or negative</param>
            <returns>a float between 0.0, inclusive, and outerBound, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveFloat(System.Single,System.Single)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single,System.Single)"/>, but this is inclusive on both innerBound and outerBound.
            </summary>
            <remarks>
            It may be important to note that it returns outerBound on only 0.00000596046412226771% of calls, if it can return
            it at all because of floating-point imprecision when innerBound is a larger number.
            </remarks>
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer inclusive bound; may be positive or negative</param>
            <returns>a float between innerBound, inclusive, and outerBound, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveDecimal">
            <summary>
            This is just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal"/>, returning a float between 0 and 1, except that it is inclusive on both 0.0 and 1.0.
            </summary>
            <returns>a decimal between 0.0, inclusive, and 1.0, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveDecimal(System.Decimal)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal(System.Decimal)"/>, but this is inclusive on both 0.0 and outerBound.
            </summary>
            <param name="outerBound">the outer inclusive bound; may be positive or negative</param>
            <returns>a decimal between 0.0, inclusive, and outerBound, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextInclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal(System.Decimal,System.Decimal)"/>, but this is inclusive on both innerBound and outerBound.
            </summary>
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer inclusive bound; may be positive or negative</param>
            <returns>a decimal between innerBound, inclusive, and outerBound, inclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDouble">
            <summary>
            Gets a random double between 0.0 and 1.0, exclusive at both ends, using a technique that can produce more of the valid values for a double
            (near to 0) than other methods.
            </summary>
            <remarks>
            This can be implemented in various ways; the simplest is to generate a number in the range between 1 (inclusive) and 2<sup>53</sup> (exclusive), then divide the result by 2<sup>53</sup>.
            The technique used in AbstractRandom is very different; it is related to <a href="https://allendowney.com/research/rand/">this algorithm by Allen Downey</a>.
            Because the ability to get the number of leading or trailing zeros is in a method not present in .NET Standard, we get close to that by using
            <see cref="M:System.BitConverter.DoubleToInt64Bits(System.Double)"/> on a negative long and using its exponent bits directly. The smallest double AbstractRandom can return is 1.0842021724855044E-19 ; the largest it
            can return is 0.9999999999999999 . The smallest result is significantly closer to 0 than <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble"/> can produce without actually returning 0, and also much closer than the first method.
            <br/>
            The method used by AbstractRandom has several possible variations; the one it uses now is about 25% slower or less than NextDouble(). If .NET 6 becomes the default framework, another implementation
            for this method becomes possible that outperforms NextDouble() and actually has an even better range as it approaches 0.0. This second method is not the default because it is over 300% slower on earlier,
            pre-.NET Core versions, and switching between the two would change results between platforms.
            </remarks>
            <returns>A double between 0.0 and 1.0, exclusive at both ends.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDouble(System.Double)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double)"/>, but this is exclusive on both 0.0 and outerBound.
            </summary>
            <remarks>
            Unlike <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDouble"/>, this does not get especially close to zero in most implementations
            simply because when the range is unknown, the very small gap between a valid result and a result this must exclude
            may become so small that results get rounded into the must-exclude values. This has to keep slightly more distance
            between its minimum and maximum valid results and the bounds it must exclude.
            </remarks>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <returns>a double between 0.0, exclusive, and outerBound, exclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDouble(System.Double,System.Double)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double,System.Double)"/>, but this is exclusive on both innerBound and outerBound.
            This also allows outerBound to be greater than or less than innerBound. If they are equal, this returns innerBound.
            </summary>
            <remarks>
            Unlike <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDouble"/>, this does not get especially close to innerBound in most implementations
            simply because when the range is unknown, the very small gap between a valid result and a result this must exclude
            may become so small that results get rounded into the must-exclude values. This has to keep slightly more distance
            between its minimum and maximum valid results and the bounds it must exclude.
            </remarks>
            <param name="innerBound">the inner exclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <returns>a double between innerBound, exclusive, and outerBound, exclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveFloat">
            <summary>
            Gets a random float between 0.0 and 1.0, exclusive at both ends. This cannot return 0 or 1.
            </summary>
            <remarks>
            This can be implemented in various ways; the simplest is to generate a number in the range between 1 (inclusive) and 2<sup>24</sup> (exclusive), then divide the result by 2<sup>24</sup>.
            The technique used in AbstractRandom is very different; it is related to <a href="https://allendowney.com/research/rand/">this algorithm by Allen Downey</a>.
            Because the ability to get the number of leading or trailing zeros is in a method not present in .NET Standard, we get close to that by using
            <see cref="M:System.BitConverter.SingleToInt32Bits(System.Single)"/> on a negative long and using its exponent bits directly. The smallest float AbstractRandom can return is 1.0842022E-19; the largest it
            can return is 0.99999994 . The smallest result is significantly closer to 0 than <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat"/> can produce without actually returning 0, and also much closer than the first method.
            <br/>
            The method used by AbstractRandom has several possible variations; the one it uses now is about 25% slower or less than NextFloat(). If .NET 6 becomes the default framework, another implementation
            for this method becomes possible that outperforms NextFloat() and actually has an even better range as it approaches 0.0. This second method is not the default because it is over 300% slower on earlier,
            pre-.NET Core versions, and switching between the two would change results between platforms.
            </remarks>
            <returns>A random uniform float between 0 and 1 (both exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveFloat(System.Single)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single)"/>, but this is exclusive on both 0.0 and outerBound.
            If outerBound is 0, this returns 0.
            </summary>
            <remarks>
            Unlike <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveFloat"/>, this does not get especially close to zero in most implementations
            simply because when the range is unknown, the very small gap between a valid result and a result this must exclude
            may become so small that results get rounded into the must-exclude values. This has to keep slightly more distance
            between its minimum and maximum valid results, and the bounds it must exclude.
            </remarks>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <returns>a float between 0.0, exclusive, and outerBound, exclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveFloat(System.Single,System.Single)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single,System.Single)"/>, but this is exclusive on both innerBound and outerBound.
            This also allows outerBound to be greater than or less than innerBound. If they are equal, this returns innerBound.
            </summary>
            <remarks>
            Unlike <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveFloat"/>, this does not get especially close to innerBound in most implementations
            simply because when the range is unknown, the very small gap between a valid result and a result this must exclude
            may become so small that results get rounded into the must-exclude values. This has to keep slightly more distance
            between its minimum and maximum valid results, and the bounds it must exclude.
            </remarks>
            <param name="innerBound">the inner exclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <returns>a float between innerBound, exclusive, and outerBound, exclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDecimal">
            <summary>
            Gets a random decimal between 0.0 and 1.0, exclusive at both ends. This can return decimal values between 1E-28 and 1 - 1E-28; it cannot return 0 or 1.
            </summary>
            <returns>A random uniform decimal between 0 and 1 (both exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDecimal(System.Decimal)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal(System.Decimal)"/>, but this is exclusive on both 0.0 and outerBound.
            If outerBound is 0, this returns 0.
            </summary>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <returns>a decimal between 0.0, exclusive, and outerBound, exclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.NextExclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Just like <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDecimal(System.Decimal,System.Decimal)"/>, but this is exclusive on both innerBound and outerBound.
            This also allows outerBound to be greater than or less than innerBound. If they are equal, this returns innerBound.
            </summary>
            <param name="innerBound">the inner exclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <returns>a decimal between innerBound, exclusive, and outerBound, exclusive</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)">
            <summary>
            (Optional) If implemented, this should jump the generator forward by the given number of steps as distance and return the result of NextULong()
            as if called at that step. The distance can be negative if a long is cast to an ulong, which jumps backwards if the period of the generator is 2 to the 64.
            Another way to jump backward <code>n</code> steps, where n is an ulong, is <code>Skip(0UL - n)</code>.
            </summary>
            <param name="distance">How many steps to jump forward</param>
            <returns>The result of what NextULong() would return at the now-current jumped state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong">
            <summary>
            (Optional) If implemented, jumps the generator back to the previous state and returns what NextULong() would have produced at that state.
            </summary>
            <returns>The result of what NextULong() would return at the previous state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.IEnhancedRandom.Leap">
            <summary>
            (Optional) If implemented, jumps extremely far in the generator's sequence, such that it would require at least <code>Math.Pow(2, 64)</code> calls to Leap() to complete
            a cycle through the generator's entire sequence. This is meant only for generators with known, predictable, and very large periods; it does not necessitate
            that this generator implements <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/> or even <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>.
            </summary>
            <returns>The result of what NextULong() would return if it was called at the state this jumped to.</returns>
        </member>
        <member name="T:ShaiRandom.Generators.MaxAttemptsReachedException">
            <summary>
            Thrown when a list-based random selection function can't find an item satisfying its selector within the
            number of attempts specified.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.MaxAttemptsReachedException.#ctor">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.EnhancedRandomExtensions">
            <summary>
            A collection of useful extension methods for IEnhancedRandom implementations.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MinIntOf(ShaiRandom.Generators.IEnhancedRandom,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the minimum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextInt(System.Int32,System.Int32)"/> using the
            given innerBound and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the lower the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the lowest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MaxIntOf(ShaiRandom.Generators.IEnhancedRandom,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the maximum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextInt(System.Int32,System.Int32)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the higher the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the highest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MinLongOf(ShaiRandom.Generators.IEnhancedRandom,System.Int64,System.Int64,System.Int32)">
            <summary>
            Returns the minimum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextLong(System.Int64,System.Int64)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the lower the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the lowest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MaxLongOf(ShaiRandom.Generators.IEnhancedRandom,System.Int64,System.Int64,System.Int32)">
            <summary>
            Returns the maximum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextLong(System.Int64,System.Int64)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the higher the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the highest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MinUIntOf(ShaiRandom.Generators.IEnhancedRandom,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Returns the minimum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt(System.UInt32,System.UInt32)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the lower the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the lowest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MaxUIntOf(ShaiRandom.Generators.IEnhancedRandom,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Returns the maximum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextUInt(System.UInt32,System.UInt32)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the higher the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the highest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MinULongOf(ShaiRandom.Generators.IEnhancedRandom,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            Returns the minimum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong(System.UInt64,System.UInt64)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the lower the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the lowest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MaxULongOf(ShaiRandom.Generators.IEnhancedRandom,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            Returns the maximum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextULong(System.UInt64,System.UInt64)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the higher the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the highest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MinDoubleOf(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the minimum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double,System.Double)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the lower the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the lowest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MaxDoubleOf(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the maximum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextDouble(System.Double,System.Double)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the higher the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the highest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MinFloatOf(ShaiRandom.Generators.IEnhancedRandom,System.Single,System.Single,System.Int32)">
            <summary>
            Returns the minimum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single,System.Single)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the lower the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the lowest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.MaxFloatOf(ShaiRandom.Generators.IEnhancedRandom,System.Single,System.Single,System.Int32)">
            <summary>
            Returns the maximum result of trials calls to <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextFloat(System.Single,System.Single)"/> using the given innerBound
            and outerBound. The innerBound is inclusive; the outerBound is exclusive.
            The higher trials is, the higher the average value this returns.
            </summary>
            <param name="rng" />
            <param name="innerBound">the inner inclusive bound; may be positive or negative</param>
            <param name="outerBound">the outer exclusive bound; may be positive or negative</param>
            <param name="trials">how many random numbers to acquire and compare</param>
            <returns>the highest random number between innerBound (inclusive) and outerBound (exclusive) this found</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0})">
            <summary>
            Gets a randomly-chosen item from the given non-empty span.
            </summary>
            <exception cref="T:System.ArgumentException">An empty span was given.</exception>
            <param name="rng" />
            <typeparam name="T">The type of items in the span.</typeparam>
            <param name="items">Must be non-empty.</param>
            <returns>A randomly-chosen item from the span.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <summary>
            Continuously selects random items from the given non-empty span, until one is found for which
            <paramref name="selector"/> returns true.
            </summary>
            <remarks>
            This function will never return if there is no object in the span meeting the criteria of the selector
            function, and may take an extremely long time if the list is very big and there are very few items in the
            list meeting the selector's criteria.  For more deterministic termination, consider using the overload
            of this function taking a maximum number of attempts:
            <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},System.Int32)"/>
            </remarks>
            <exception cref="T:System.ArgumentException">An empty span was given.</exception>
            <param name="rng" />
            <typeparam name="T">The type of items in the span.</typeparam>
            <param name="items">Must be non-empty.</param>
            <param name="selector">Function that should return true _only_ for a valid item to select.</param>
            <returns>A randomly-chosen item from the span for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Continuously selects random items from the given non-empty span, until either one is found for which
            <paramref name="selector"/> returns true, or the maximum number of attempts is reached.  An exception will
            be thrown if the function is unable to generate a valid item within the number of attempts specified.
            </summary>
            <exception cref="T:System.ArgumentException">An empty span was given.</exception>
            <exception cref="T:ShaiRandom.Generators.MaxAttemptsReachedException">The function could not find a valid element within the maximum number of tries.</exception>
            <param name="rng" />
            <typeparam name="T">The type of items in the span.</typeparam>
            <param name="items">Must be non-empty.</param>
            <param name="selector">Function that should return true _only_ for a valid item to select.</param>
            <param name="maxTries">Maximum number of times to try generating a valid value before giving up and throwing an exception.</param>
            <returns>A randomly-chosen item from the span for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Gets a randomly-chosen item from the given non-null, non-empty IReadOnlyList.
            </summary>
            <remarks>
            Note that this function can take arrays as well as the <paramref name="items"/> value, since arrays implement
            IReadOnlyList.
            </remarks>
            <param name="rng" />
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="items">Must be non-null and non-empty.</param>
            <returns>A randomly-chosen item from list.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
             <summary>
             Continuously selects random items from the given non-empty IReadOnlyList, until one is found for which
             <paramref name="selector"/> returns true.
             </summary>
             <remarks>
             This function will never return if there is no object in the list meeting the criteria of the selector
             function, and may take an extremely long time if the list is very big and there are very few items in the
             list meeting the selector's criteria.  For more deterministic termination, consider using the overload
             of this function taking a maximum number of attempts:
             <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean},System.Int32)"/>
            
             Note that this function can take arrays as well as the <paramref name="items"/> value, since arrays implement
             IReadOnlyList.
             </remarks>
             <exception cref="T:System.ArgumentException">An empty list was given.</exception>
             <param name="rng" />
             <typeparam name="T">The type of items in the list.</typeparam>
             <param name="items">Must be non-empty.</param>
             <param name="selector">Function that should return true _only_ for a valid item to select.</param>
             <returns>A randomly-chosen item from the list for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomElement``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Continuously selects random items from the given non-empty IReadOnlyList, until either one is found for which
            <paramref name="selector"/> returns true, or the maximum number of attempts is reached.  An exception will
            be thrown if the function is unable to generate a valid item within the number of attempts specified.
            </summary>
            <remarks>
            Note that this function can take arrays as well as the <paramref name="items"/> value, since arrays implement
            IReadOnlyList.
            </remarks>
            <exception cref="T:System.ArgumentException">An empty list was given.</exception>
            <exception cref="T:ShaiRandom.Generators.MaxAttemptsReachedException">The function could not find a valid element within the maximum number of tries.</exception>
            <param name="rng" />
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="items">Must be non-empty.</param>
            <param name="selector">Function that should return true _only_ for a valid item to select.</param>
            <param name="maxTries">Maximum number of times to try generating a valid value before giving up and throwing an exception.</param>
            <returns>A randomly-chosen item from the list for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0})">
            <summary>
            Gets a randomly-chosen value that is a valid index for an item from the given non-empty span.
            </summary>
            <param name="rng" />
            <typeparam name="T">The type of items in the span.</typeparam>
            <param name="items">Must be non-empty.</param>
            <returns>A randomly-chosen value that is a valid index in the span.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0},System.Func{System.Int32,System.Boolean})">
            <summary>
            Continuously selects random indices from the given (non-empty) span, until one is found for which the
            given <paramref name="selector"/> returns true.
            </summary>
            <remarks>
            This function will never return if there is no object in the span meeting the criteria of the selector
            function, and may take an extremely long time if the list is very big and there are very few items in the
            list meeting the selector's criteria.  For more deterministic termination, consider using the overload
            of this function taking a maximum number of attempts:
            <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0},System.Func{System.Int32,System.Boolean},System.Int32)"/>
            </remarks>
            <exception cref="T:System.ArgumentException">An empty span was given.</exception>
            <param name="rng" />
            <param name="items">Must be non-empty.</param>
            <param name="selector">Function that should return true _only_ for a valid selection of index.</param>
            <typeparam name="T">The type of items in the span.</typeparam>
            <returns>A randomly-chosen value that is a valid index in the span, for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.ReadOnlySpan{``0},System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            selects random indices from the given (non-empty) span, until either one is found for which
            <paramref name="selector"/> returns true, or the maximum number of attempts is reached.  An exception will
            be thrown if the function is unable to generate a valid index within the number of attempts specified.
            </summary>
            <exception cref="T:System.ArgumentException">An empty span was given.</exception>
            <exception cref="T:ShaiRandom.Generators.MaxAttemptsReachedException">The function could not find a valid index within the maximum number of tries.</exception>
            <param name="rng" />
            <typeparam name="T">The type of items in the span.</typeparam>
            <param name="items">Must be non-empty.</param>
            <param name="selector">Function that should return true _only_ for a valid index to select.</param>
            <param name="maxTries">Maximum number of times to try generating a valid value before giving up and throwing an exception.</param>
            <returns>A randomly-chosen index from the span for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Gets a randomly-chosen value that is a valid index for an item from the given non-null non-empty IReadOnlyList.
            </summary>
            <remarks>
            Note that this function can take arrays as well as the <paramref name="items"/> value, since arrays implement
            IReadOnlyList.
            </remarks>
            <param name="rng" />
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="items">Must be non-null and non-empty.</param>
            <returns>A randomly-chosen value that is a valid index in the list.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0},System.Func{System.Int32,System.Boolean})">
            <summary>
            Continuously selects random indices from the given (non-empty) IReadOnlyList, until one is found for which the
            given <paramref name="selector"/> returns true.
            </summary>
            <remarks>
            This function will never return if there is no object in the list meeting the criteria of the selector
            function, and may take an extremely long time if the list is very big and there are very few items in the
            list meeting the selector's criteria.  For more deterministic termination, consider using the overload
            of this function taking a maximum number of attempts:
            <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0},System.Func{System.Int32,System.Boolean},System.Int32)"/>
            </remarks>
            <exception cref="T:System.ArgumentException">An empty list was given.</exception>
            <param name="rng" />
            <param name="items">Must be non-empty.</param>
            <param name="selector">Function that should return true _only_ for a valid selection of index.</param>
            <typeparam name="T">The type of items in the list.</typeparam>
            <returns>A randomly-chosen value that is a valid index in the list, for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.RandomIndex``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IReadOnlyList{``0},System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Continuously selects random indices from the given (non-empty) IReadOnlyList, until either one is found for which
            <paramref name="selector"/> returns true, or the maximum number of attempts is reached.  An exception will
            be thrown if the function is unable to generate a valid index within the number of attempts specified.
            </summary>
            <exception cref="T:System.ArgumentException">An empty list was given.</exception>
            <exception cref="T:ShaiRandom.Generators.MaxAttemptsReachedException">The function could not find a valid index within the maximum number of tries.</exception>
            <param name="rng" />
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="items">Must be non-empty.</param>
            <param name="selector">Function that should return true _only_ for a valid index to select.</param>
            <param name="maxTries">Maximum number of times to try generating a valid value before giving up and throwing an exception.</param>
            <returns>A randomly-chosen index from the list for which <paramref name="selector"/> returns true.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.Shuffle``1(ShaiRandom.Generators.IEnhancedRandom,System.Span{``0})">
             <summary>
             Shuffles the given Span in-place pseudo-randomly, using the Fisher-Yates (also called Knuth) shuffle algorithm.
             </summary>
             <remarks>
             Note that this function can easily accept an array as well, or anything else that can convert to span either
             via either implicit or explicit conversion.  It can also shuffle only part of any such array or structure
             (see examples).
             <example>
             <code>
             // Shuffle whole array (either works)
             myRng.Shuffle&lt;TypeOfElementsInMyArray&gt;(myArray);
             myRng.Shuffle(myArray.AsSpan());
             </code>
             </example>
            
             <example>
             <code>
             // Shuffle the three elements starting at index 1
             myRng.Shuffle(myArray.AsSpan(1, 3));
             </code>
             </example>
             <example>
             <code>
             // Shuffle all elements from index 1 to (but not including) the last element
             myRng.Shuffle(myArray.AsSpan(1..^1));
             </code>
             </example>
             </remarks>
             <typeparam name="T">Type of elements in the span</typeparam>
             <param name="rng" />
             <param name="items">A span of some type; may contain null items</param>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.Shuffle``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the given IList in-place pseudo-randomly, using the Fisher-Yates (also called Knuth) shuffle algorithm.
            </summary>
            <param name="rng" />
            <param name="items">an IList; must be non-null but may contain null items</param>
            <typeparam name="T">Type of elements in the list</typeparam>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.Shuffle``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IList{``0},System.Index)">
            <summary>
            Shuffles a section of the given IList in-place pseudo-randomly, using the Fisher-Yates (also called Knuth) shuffle algorithm.
            Only items from the given index onward will be shuffled.
            </summary>
            <param name="rng" />
            <param name="items">an IList; must be non-null but may contain null items</param>
            <param name="startIndex">Index of the first element in the list to shuffle</param>
            <typeparam name="T">Type of elements in the list</typeparam>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.Shuffle``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IList{``0},System.Range)">
            <summary>
            Shuffles a section of the given IList in-place pseudo-randomly, using the Fisher-Yates (also called Knuth) shuffle algorithm.
            Only items within the given range will be shuffled.
            </summary>
            <param name="rng" />
            <param name="items">an IList; must be non-null but may contain null items</param>
            <param name="range">Range of items in the list to shuffle</param>
            <typeparam name="T">Type of elements in the list</typeparam>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.Shuffle``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffles a section of the given IList in-place pseudo-randomly, using the Fisher-Yates (also called Knuth) shuffle algorithm.
            </summary>
            <param name="rng" />
            <param name="items">an IList; must be non-null but may contain null items</param>
            <param name="start">the index of the first element of the IList that can be shuffled</param>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.Shuffle``1(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Shuffles a section of the given IList in-place pseudo-randomly, using the Fisher-Yates (also called Knuth) shuffle algorithm.
            </summary>
            <param name="rng" />
            <param name="items">an IList; must be non-null but may contain null items</param>
            <param name="start">the index of the first element of the IList that can be shuffled</param>
            <param name="length">the length of the section to shuffle</param>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextNormal(ShaiRandom.Generators.IEnhancedRandom,System.Double,System.Double)">
            <summary>
            Gets a normally-distributed (Gaussian) double, with a the specified mean (default 0.0) and standard deviation (default 1.0).
            If the standard deviation is 1.0 and the mean is 0.0, then this can produce results between -8.209536145151493 and 8.209536145151493 (both extremely rarely).
            </summary>
            <param name="rng" />
            <param name="mean">Mean for normal distribution.</param>
            <param name="stdDev">Standard deviation for normal distribution.</param>
            <returns>A double from the normal distribution with the specified mean (default 0.0) and standard deviation (default 1.0).</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextBool(ShaiRandom.Generators.IEnhancedRandom,System.Single)">
            <summary>
            Returns true if a random value between 0 and 1 is less than the specified value.
            </summary>
            <param name="rng" />
            <param name="chance">a float between 0.0 and 1.0; higher values are more likely to result in true</param>
            <returns>a bool selected with the given chance of being true</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextSign(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Returns -1 or 1, randomly.
            </summary>
            <param name="rng" />
            <returns>-1 or 1, selected with approximately equal likelihood</returns>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextTriangular(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Returns a triangularly distributed random number between -1.0 (exclusive) and 1.0 (exclusive), where values around zero are
            more likely. Advances the state twice.
            </summary>
            <remarks>
            This can be an optimized version of <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextTriangular(ShaiRandom.Generators.IEnhancedRandom,System.Single,System.Single,System.Single)"/>, or: <code> NextTriangular(-1, 1, 0)</code>
            </remarks>
            <param name="rng" />
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextTriangular(ShaiRandom.Generators.IEnhancedRandom,System.Single)">
            <summary>
            Returns a triangularly distributed random number between <code>-max</code> (exclusive) and <code>max</code> (exclusive), where values
            around zero are more likely. Advances the state twice.
            </summary>
            <remarks>
            This is an optimized version of <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextTriangular(ShaiRandom.Generators.IEnhancedRandom,System.Single,System.Single,System.Single)"/>, or: <code> NextTriangular(-max, max, 0)</code>
            </remarks>
            <param name="rng" />
            <param name="max">the outer exclusive limit</param>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextTriangular(ShaiRandom.Generators.IEnhancedRandom,System.Single,System.Single)">
            <summary>
            Returns a triangularly distributed random number between min (inclusive) and max (exclusive), where the
            mode argument defaults to the midpoint between the bounds, giving a symmetric distribution. Advances the state once.
            </summary>
            <remarks>
            This is an optimized version of <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextTriangular(ShaiRandom.Generators.IEnhancedRandom,System.Single,System.Single,System.Single)"/>, or: <code> NextTriangular(min, max, (min + max) * 0.5f)</code>
            </remarks>
            <param name="rng" />
            <param name="min">the lower limit</param>
            <param name="max">the upper limit</param>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.NextTriangular(ShaiRandom.Generators.IEnhancedRandom,System.Single,System.Single,System.Single)">
            <summary>
            Returns a triangularly distributed random number between min (inclusive) and max (exclusive), where values
            around mode are more likely. Advances the state once.
            </summary>
            <param name="rng" />
            <param name="min"> the lower limit</param>
            <param name="max"> the upper limit</param>
            <param name="mode">the point around which the values are more likely</param>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.SetWith(ShaiRandom.Generators.IEnhancedRandom,ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Sets each state in this IEnhancedRandom to the corresponding state in the other IEnhancedRandom.
            This generally only works correctly if both objects have the same class.
            </summary>
            <param name="rng">Any IEnhancedRandom that supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SetSelectedState(System.Int32,System.UInt64)"/>.</param>
            <param name="other">Another IEnhancedRandom that almost always should have the same class as this one.</param>
        </member>
        <member name="M:ShaiRandom.Generators.EnhancedRandomExtensions.Matches(ShaiRandom.Generators.IEnhancedRandom,ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Given two IEnhancedRandom objects that could have the same or different classes,
            this returns true if they have the same class and same state, or false otherwise.
            </summary>
            <remarks>
            Both of the arguments should implement <see cref="M:ShaiRandom.Generators.IEnhancedRandom.SelectState(System.Int32)"/>, or this
            will throw an exception. This can be useful for comparing IEnhancedRandom classes.
            </remarks>
            <returns>true if the two objects have the same class and state, or false otherwise</returns>
        </member>
        <member name="T:ShaiRandom.Generators.KnownSeriesRandom">
            <summary>
            "Random number generator" that takes in a series of values, and simply returns them
            sequentially when RNG functions are called.
            </summary>
            <remarks>
            This class may be useful for testing, when you want to specify the numbers returned by an RNG
            without drastically modifying any code using the RNG.
            <br />
            This class is mostly from GoRogue, with significant modifications for ShaiRandom's API.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.BoolSeries">
            <summary>
            Series of booleans returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.ByteSeries">
            <summary>
            Series of bytes returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.DoubleSeries">
            <summary>
            Series of doubles returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.FloatSeries">
            <summary>
            Series of floats returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.IntSeries">
            <summary>
            Series of integers returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.UIntSeries">
            <summary>
            Series of uints returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.LongSeries">
            <summary>
            Series of longs returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.ULongSeries">
            <summary>
            Series of ulong values returned by this generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.DecimalSeries">
            <summary>
            Series of decimal values returned by this generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.#ctor(ShaiRandom.Generators.KnownSeriesRandom)">
            <summary>
            Creates a KnownSeriesRandom that is a copy of the given one.
            </summary>
            <param name="other">Generator to copy state from.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Creates a new known series generator, with parameters to indicate which series to use for
            the integer, unsigned integer, double, bool, and byte-based RNG functions. If null is
            specified, no values of that type may be returned, and functions that try to return a
            value of that type will throw an exception.
            </summary>
            <remarks>
            The values given for each series are looped over repeatedly as the appropriate function is called, so the
            RNG functions can be called an arbitrary number of times; doing so will simply result in values from the
            sequence being reused.
            </remarks>
            <param name="intSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextInt"/>.</param>
            <param name="uintSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextUInt"/>.</param>
            <param name="doubleSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextDouble"/>.</param>
            <param name="boolSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextBool"/>.</param>
            <param name="byteSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextBytes(System.Span{System.Byte})"/>.</param>
            <param name="floatSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextFloat"/>.</param>
            <param name="longSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextLong"/>.</param>
            <param name="ulongSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextULong"/>.</param>
            <param name="decimalSeries">Series of values to return via <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.NextDecimal"/>.</param>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.StateCount">
            <summary>
            This generator has 9 states; one for each type of IEnumerable taken in the constructor.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.SupportsSkip">
            <summary>
            This does NOT support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.SupportsPrevious">
            <summary>
            This does NOT support <see cref="M:ShaiRandom.Generators.KnownSeriesRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.KnownSeriesRandom.DefaultTag">
            <summary>
            The identifying tag here is "KnSR" .
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.Copy">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextBool">
            <summary>
            Returns the next boolean value from the underlying series.
            </summary>
            <returns>The next boolean value from the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInt">
            <summary>
            Returns the next integer from the underlying series.
            </summary>
            <returns>The next integer from the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInt(System.Int32)">
            <summary>
            Returns the next integer from underlying series, if it is within the bound; if not,
            throws an exception.
            </summary>
            <param name="outerBound">The upper bound for the returned integer, exclusive.</param>
            <returns>The next integer from the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInt(System.Int32,System.Int32)">
            <summary>
            Returns the next integer in the underlying series. If the value is less than
            <paramref name="minValue"/>, or greater than/equal to <paramref name="maxValue"/>, throws an exception.
            </summary>
            <param name="minValue">The minimum value for the returned number, inclusive.</param>
            <param name="maxValue">The maximum value for the returned number, exclusive.</param>
            <returns>The next integer in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextUInt">
            <summary>
            Returns the next uint in the underlying series.
            </summary>
            <returns>The next uint in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextUInt(System.UInt32)">
            <summary>
            Returns the next uint in the underlying series.  If it is outside of the bound specified, throws an exception.
            </summary>
            <param name="outerBound">The upper bound for the returned uint, exclusive.</param>
            <returns>The next uint in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextBits(System.Int32)">
            <summary>
            Uses the next unsigned integer from the underlying series to return the specified number of bits.
            </summary>
            <param name="bits">Number of bits to return</param>
            <returns>An integer containing the specified number of bits.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextUInt(System.UInt32,System.UInt32)">
            <summary>
            Returns the next unsigned integer in the underlying series. If the value is less than
            <paramref name="minValue"/>, or greater than/equal to <paramref name="maxValue"/>, throws an exception.
            </summary>
            <param name="minValue">The minimum value for the returned number, inclusive.</param>
            <param name="maxValue">The maximum value for the returned number, exclusive.</param>
            <returns>The next unsigned integer in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextDouble">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound [0, 1), throws
            an exception.
            </summary>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextDouble(System.Double)">
            <summary>
            Returns the next double in the underlying series. The inner bound is always 0.0. If the value from the series is outside of the bound specified, throws an exception.
            </summary>
            <param name="outerBound">The outer bound for the returned double, exclusive.</param>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextDouble(System.Double,System.Double)">
            <summary>
            Returns the next double in the underlying series. If the value is not between <paramref name="innerBound"/>
            (inclusive), and <paramref name="outerBound"/> (exclusive), throws an exception.
            </summary>
            <param name="innerBound">The inner bound (usually the minimum) for the returned number, inclusive.</param>
            <param name="outerBound">The outer bound (usually the maximum) for the returned number, exclusive.</param>
            <returns>The next double in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextSparseFloat">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound [0, 1], throws
            an exception.
            </summary>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextSparseFloat(System.Single)">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound [0, <paramref name="outerBound"/>], throws
            an exception.
            </summary>
            <param name="outerBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextSparseFloat(System.Single,System.Single)">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound [<paramref name="minBound"/>, <paramref name="maxBound"/>], throws
            an exception.
            </summary>
            <param name="minBound">The minimum value of the returned number, inclusive.</param>
            <param name="maxBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next float in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextSparseDouble">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound [0, 1), throws
            an exception.
            </summary>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextSparseDouble(System.Double)">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound [0, <paramref name="outerBound"/>], throws
            an exception.
            </summary>
            <remarks>
            Like AbstractRandom's implementation, this can permit values that equal outerBound, so it acts like NextInclusiveDouble().
            </remarks>
            <param name="outerBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextSparseDouble(System.Double,System.Double)">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound [<paramref name="minBound"/>, <paramref name="maxBound"/>], throws
            an exception.
            </summary>
            <remarks>
            Like AbstractRandom's implementation, this can permit values that equal outerBound, so it acts like NextInclusiveDouble().
            </remarks>
            <param name="minBound">The minimum value of the returned number, inclusive.</param>
            <param name="maxBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next double in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveDouble">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound [0, 1], throws
            an exception.
            </summary>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveDouble(System.Double)">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound [0, <paramref name="outerBound"/>], throws
            an exception.
            </summary>
            <param name="outerBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveDouble(System.Double,System.Double)">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound [<paramref name="minBound"/>, <paramref name="maxBound"/>], throws
            an exception.
            </summary>
            <param name="minBound">The minimum value of the returned number, inclusive.</param>
            <param name="maxBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next double in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveDouble">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound (0, 1), throws
            an exception.
            </summary>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveDouble(System.Double)">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound ([)0, <paramref name="outerBound"/>), throws
            an exception.
            </summary>
            <param name="outerBound">The maximum value of the returned number, exclusive.</param>
            <returns>The next double in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveDouble(System.Double,System.Double)">
            <summary>
            Returns the next double in the underlying series.  If it is outside of the bound (<paramref name="minBound"/>, <paramref name="maxBound"/>), throws
            an exception.
            </summary>
            <param name="minBound">The minimum value of the returned number, exclusive.</param>
            <param name="maxBound">The maximum value of the returned number, exclusive.</param>
            <returns>The next double in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextFloat">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound [0, 1), throws
            an exception.
            </summary>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextFloat(System.Single)">
            <summary>
            Returns the next float in the underlying series. The inner bound is always 0. If it is outside of the bound specified, throws an exception.
            </summary>
            <param name="outerBound">The outer bound for the returned float, exclusive.</param>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextFloat(System.Single,System.Single)">
            <summary>
            Returns the next float in the underlying series. If the value is not between <paramref name="innerBound"/>
            (inclusive), and <paramref name="outerBound"/> (exclusive), throws an exception.
            </summary>
            <param name="innerBound">The inner bound (usually the minimum) for the returned number, inclusive.</param>
            <param name="outerBound">The outer bound (usually the maximum) for the returned number, exclusive.</param>
            <returns>The next float in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveFloat">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound [0, 1], throws
            an exception.
            </summary>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveFloat(System.Single)">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound [0, <paramref name="outerBound"/>], throws
            an exception.
            </summary>
            <param name="outerBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveFloat(System.Single,System.Single)">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound [<paramref name="minBound"/>, <paramref name="maxBound"/>], throws
            an exception.
            </summary>
            <param name="minBound">The minimum value of the returned number, inclusive.</param>
            <param name="maxBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next float in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveDecimal">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound [0, 1], throws
            an exception.
            </summary>
            <returns>The next decimal in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveDecimal(System.Decimal)">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound [0, <paramref name="outerBound"/>], throws
            an exception.
            </summary>
            <param name="outerBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next decimal in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextInclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound [<paramref name="minBound"/>, <paramref name="maxBound"/>], throws
            an exception.
            </summary>
            <param name="minBound">The minimum value of the returned number, inclusive.</param>
            <param name="maxBound">The maximum value of the returned number, inclusive.</param>
            <returns>The next decimal in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveFloat">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound (0, 1), throws
            an exception.
            </summary>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveFloat(System.Single)">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound ([)0, <paramref name="outerBound"/>), throws
            an exception.
            </summary>
            <param name="outerBound">The maximum value of the returned number, exclusive.</param>
            <returns>The next float in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveFloat(System.Single,System.Single)">
            <summary>
            Returns the next float in the underlying series.  If it is outside of the bound (<paramref name="minBound"/>, <paramref name="maxBound"/>), throws
            an exception.
            </summary>
            <param name="minBound">The minimum value of the returned number, exclusive.</param>
            <param name="maxBound">The maximum value of the returned number, exclusive.</param>
            <returns>The next float in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextLong">
            <summary>
            Returns the next long from the underlying series.
            </summary>
            <returns>The next long from the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextLong(System.Int64)">
            <summary>
            Returns the next long from underlying series, if it is within the bound; if not,
            throws an exception.
            </summary>
            <param name="outerBound">The upper bound for the returned long, exclusive.</param>
            <returns>The next long from the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextLong(System.Int64,System.Int64)">
            <summary>
            Returns the next long in the underlying series. If the value is less than
            <paramref name="minValue"/>, or greater than/equal to <paramref name="maxValue"/>, throws an exception.
            </summary>
            <param name="minValue">The minimum value for the returned number, inclusive.</param>
            <param name="maxValue">The maximum value for the returned number, exclusive.</param>
            <returns>The next long in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextULong">
            <summary>
            Returns the next ulong from the underlying series.
            </summary>
            <returns>The next ulong from the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextULong(System.UInt64)">
            <summary>
            Returns the next ulong from underlying series, if it is within the bound; if not,
            throws an exception.
            </summary>
            <param name="outerBound">The upper bound for the returned ulong, exclusive.</param>
            <returns>The next ulong from the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextULong(System.UInt64,System.UInt64)">
            <summary>
            Returns the next ulong in the underlying series. If the value is less than
            <paramref name="minValue"/>, or greater than/equal to <paramref name="maxValue"/>, throws an exception.
            </summary>
            <param name="minValue">The minimum value for the returned number, inclusive.</param>
            <param name="maxValue">The maximum value for the returned number, exclusive.</param>
            <returns>The next ulong in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextBytes(System.Span{System.Byte})">
            <summary>
            Fills the specified buffer with values from the underlying byte series.  See <see cref="M:ShaiRandom.Generators.IEnhancedRandom.NextBytes(System.Span{System.Byte})"/>
            for detailed examples on various uses.
            </summary>
            <param name="bytes">Buffer to fill.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextDecimal">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound [0, 1), throws an exception.
            </summary>
            <returns>The next decimal in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextDecimal(System.Decimal)">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound specified, throws an exception.
            </summary>
            <returns>The next decimal in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the next decimal in the underlying series. If the value is not between <paramref name="innerBound"/>
            (inclusive), and <paramref name="outerBound"/> (exclusive), throws an exception.
            </summary>
            <param name="innerBound">The inner bound (usually the minimum) for the returned number, inclusive.</param>
            <param name="outerBound">The outer bound (usually the maximum) for the returned number, exclusive.</param>
            <returns>The next decimal in the underlying series.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveDecimal">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound (0, 1), throws
            an exception.
            </summary>
            <returns>The next decimal in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveDecimal(System.Decimal)">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound ([)0, <paramref name="outerBound"/>), throws
            an exception.
            </summary>
            <param name="outerBound">The maximum value of the returned number, exclusive.</param>
            <returns>The next decimal in the underlying series, if it is within the bound.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.NextExclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the next decimal in the underlying series.  If it is outside of the bound (<paramref name="minBound"/>, <paramref name="maxBound"/>), throws
            an exception.
            </summary>
            <param name="minBound">The minimum value of the returned number, exclusive.</param>
            <param name="maxBound">The maximum value of the returned number, exclusive.</param>
            <returns>The next decimal in the underlying series, if it is within the bounds.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.PreviousULong">
            <summary>
            Not supported by this generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.Seed(System.UInt64)">
            <summary>
            Sets the current index of each given sequence to the given seed value.
            </summary>
            <param name="seed">Index for the sequences.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.SelectState(System.Int32)">
            <summary>
            Retrieves the index of a given series based on the selection given. The selection values start at 0, and
            they correspond to the constructor sequences as follows:
                - 0: intSeries
                - 1: uintSeries
                - 2: doubleSeries
                - 3: boolSeries
                - 4: byteSeries
                - 5: floatSeries
                - 6: longSeries
                - 7: ulongSeries
                - 8: decimalSeries
            </summary>
            <param name="selection">Selection value.</param>
            <returns>The index of the selected series that will be returned next time that series is used.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets the index for the given number series to the given value.
            </summary>
            <remarks>
            The selection values start at 0, and they correspond to the constructor sequences as follows:
                - 0: intSeries
                - 1: uintSeries
                - 2: doubleSeries
                - 3: boolSeries
                - 4: byteSeries
                - 5: floatSeries
                - 6: longSeries
                - 7: ulongSeries
                - 8: decimalSeries
            </remarks>
            <param name="selection">Selection value of index to set.</param>
            <param name="value">Value to set the index to.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.SetState(System.UInt64)">
            <summary>
            Sets all the number series to the current index value.
            </summary>
            <param name="state">Value to set to all of the series indices.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.SetState(System.UInt64,System.UInt64)">
            <summary>
            Sets the current indices in sequences as follows:
                - intSeries, doubleSeries, byteSeries, longSeries, decimalSeries : stateA
                - uintSeries, boolSeries, floatSeries, ulongSeries: stateB
            </summary>
            <param name="stateA">Index value to set for intSeries, doubleSeries, byteSeries, and longSeries.</param>
            <param name="stateB">Index value to set for uintSeries, boolSeries, floatSeries, ulongSeries.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.SetState(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the current indices in sequences as follows:
                - intSeries, boolSeries, longSeries       : stateA
                - uintSeries, byteSeries, ulongSeries     : stateB
                - doubleSeries, floatSeries, decimalSeries: stateC
            </summary>
            <param name="stateA">Index value to set for intSeries, boolSeries, and longSeries.</param>
            <param name="stateB">Index value to set for uintSeries, byteSeries, ulongSeries.</param>
            <param name="stateC">Index value to set for doubleSeries, floatSeries, and decimalSeries.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the current indices in sequences as follows:
                - intSeries, byteSeries, decimalSeries: stateA
                - uintSeries, floatSeries             : stateB
                - doubleSeries, longSeries            : stateC
                - boolSeries, ulongSeries             : stateC
            </summary>
            <param name="stateA">Index value to set for intSeries, byteSeries, and decimalSeries.</param>
            <param name="stateB">Index value to set for uintSeries and floatSeries.</param>
            <param name="stateC">Index value to set for doubleSeries and longSeries.</param>
            <param name="stateD">Index value to set for boolSeries and ulongSeries.</param>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.SetState(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.Skip(System.UInt64)">
            <summary>
            Not supported by this generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.Leap">
            <summary>
            Not supported by this generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.StringDeserialize(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.KnownSeriesRandom.StringSerialize">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.LaserRandom">
            <summary>
            It's an AbstractRandom with 2 states, more here later. This one supports <see cref="M:ShaiRandom.Generators.LaserRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.DefaultTag">
            <summary>
            The identifying tag here is "LasR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.StateA">
            <summary>
            The first state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.StateB">
            <summary>
            The second state; can be any odd ulong (the last bit must be 1).
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.#ctor">
            <summary>
            Creates a new LaserRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new LaserRandom with the given seed; any ulong value is permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.LaserRandom.Seed(System.UInt64)">Seed(ulong)</see> to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Creates a new LaserRandom with the given two states; all ulong values are permitted, but stateB will always be made odd.
            </summary>
            <remarks>
            The states will be used verbatim, except if stateB is even (then 1 is added to it).
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong; if even, 1 will be added.</param>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.StateCount">
            <summary>
            This generator has 2 ulong states, so this returns 2.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.LaserRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.LaserRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.SupportsSkip">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.LaserRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.LaserRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be 0 or 1; if it is any other value this gets state A as if 0 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0 or 1.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0 and 1 refer to states A and B, and if the selection is anything else, this treats it as 0 and sets stateA.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0 or 1.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.Seed(System.UInt64)">
            <summary>
            This initializes all states of the generator to different pseudo-random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here.
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.SetState(System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given two state variables.
            </summary>
            <remarks>
            This is the same as setting StateA and StateB as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.LaserRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the states have very little or no correlation, because certain very-similar combinations of seeds produce correlated sequences.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any odd ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.Skip(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.LaserRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.MaxRandom">
             <summary>
             A "random" number generator which implements all generation functions such that they return the maximum possible
             value that could be returned by an actual generator implementing the <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> contract.
             For example, MaxRandom.NextULong() always returns <see cref="F:System.UInt64.MaxValue"/>,
             MaxRandom.NextULong(1, 3) always returns 2, and so on.
             </summary>
             <remarks>
             This generator can be useful for unit testing or debugging algorithms that use random number generators, since
             bugs involving improper bounds tend to show up at either extreme of valid bounds.
            
             Although this generator does not inherit from <see cref="T:ShaiRandom.Generators.AbstractRandom"/>, it uses the same conceptual processes
             for determining min and max numbers that can be returned; so in terms of how exclusive bounds are handled, this
             generator performs identically to the theoretical maximums for the same values in an AbstractRandom.
             </remarks>
        </member>
        <member name="F:ShaiRandom.Generators.MaxRandom.Instance">
            <summary>
            Static instance of this generator that can be used in most cases to prevent allocation, since this generator
            has no associated state.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MaxRandom.StateCount">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.MaxRandom.SupportsReadAccess">
            <summary>
            Doesn't support reading state, since there is no state to read.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MaxRandom.SupportsWriteAccess">
            <summary>
            Doesn't support setting state, since there is no state to set.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MaxRandom.SupportsSkip">
            <summary>
            Supports <see cref="M:ShaiRandom.Generators.MaxRandom.Skip(System.UInt64)"/>, but it is equivalent to <see cref="M:ShaiRandom.Generators.MaxRandom.NextULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MaxRandom.SupportsLeap">
            <summary>
            Supports <see cref="M:ShaiRandom.Generators.MaxRandom.Leap"/>, but it is equivalent to <see cref="M:ShaiRandom.Generators.MaxRandom.NextULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MaxRandom.SupportsPrevious">
            <summary>
            Supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MaxRandom.DefaultTag">
            <summary>
            Tag for this case is "MinR".
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.Copy">
            <summary>
            Returns a new MinRandom generator; this must be equivalent to the current one, since there is no state.
            </summary>
            <returns>A new MinRandom generator.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.StringSerialize">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.StringDeserialize(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.SelectState(System.Int32)">
            <summary>
            Not supported; this generator has no state.
            </summary>
            <param name="selection"/>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Not supported; this generator has no state.
            </summary>
            <param name="selection"/>
            <param name="value"/>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.Seed(System.UInt64)">
            <summary>
            Does nothing, since this generator has no state.
            </summary>
            <param name="seed"/>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.Skip(System.UInt64)">
            <summary>
            Does nothing since the return value is always predetermined based on the parameters or implicit bounds.
            </summary>
            <param name="distance"/>
            <returns><see cref="F:System.UInt64.MaxValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.Leap">
            <summary>
            Does nothing since the return value is always predetermined based on the parameters or implicit bounds.
            </summary>
            <returns><see cref="F:System.UInt64.MaxValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.PreviousULong">
            <summary>
            Does nothing, since this generator has no state.  Always returns <see cref="F:System.UInt64.MaxValue"/>.
            </summary>
            <returns><see cref="F:System.UInt64.MaxValue"/></returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextULong">
            <summary>
            Always returns <see cref="F:System.UInt64.MaxValue"/>.
            </summary>
            <returns><see cref="F:System.UInt64.MaxValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextLong">
            <summary>
            Always returns <see cref="F:System.Int64.MaxValue"/>.
            </summary>
            <returns><see cref="F:System.Int64.MaxValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextULong(System.UInt64)">
            <summary>
            Returns the maximum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive).
            </summary>
            <param name="bound"/>
            <returns>The maximum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextLong(System.Int64)">
            <summary>
            Returns the maximum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="outerBound"/>
            <returns>The maximum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextULong(System.UInt64,System.UInt64)">
            <summary>
            Returns the maximum of the defined bounds (considering <paramref name="outer"/> to be exclusive).
            </summary>
            <param name="inner"/>
            <param name="outer"/>
            <returns>The maximum of the defined bounds (considering <paramref name="outer"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextLong(System.Int64,System.Int64)">
            <summary>
            Returns the maximum of the defined bounds (considering <paramref name="outer"/> to be exclusive).
            </summary>
            <param name="inner"/>
            <param name="outer"/>
            <returns>The maximum of the defined bounds (considering <paramref name="outer"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextBits(System.Int32)">
            <summary>
            Returns a value with the least significant <paramref name="bits"/> % 32 bits set.
            </summary>
            <param name="bits"/>
            <returns>A value with the least significant <paramref name="bits"/> % 32 bits set.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextBytes(System.Span{System.Byte})">
            <summary>
            Fills the buffer with <see cref="F:System.Byte.MaxValue"/>.
            </summary>
            <param name="bytes">The buffer to fill.</param>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInt">
            <summary>
            Always returns <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns><see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextUInt">
            <summary>
            Always returns <see cref="F:System.UInt32.MaxValue"/>.
            </summary>
            <returns><see cref="F:System.UInt32.MaxValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextUInt(System.UInt32)">
            <summary>
            Returns the maximum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive).
            </summary>
            <param name="bound"/>
            <returns>The maximum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInt(System.Int32)">
            <summary>
            Returns the maximum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="outerBound"/>
            <returns>The maximum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextUInt(System.UInt32,System.UInt32)">
            <summary>
            Returns the maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInt(System.Int32,System.Int32)">
            <summary>
            Returns the maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextBool">
            <summary>
            Always returns true.
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextFloat">
            <summary>
            Always returns 1.0f - <see cref="F:ShaiRandom.Generators.AbstractRandom.FloatAdjust"/>.
            </summary>
            <returns>1.0f - <see cref="F:ShaiRandom.Generators.AbstractRandom.FloatAdjust"/></returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextFloat(System.Single)">
            <summary>
            Returns the maximum of 0.0f and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextFloat(System.Single)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="outerBound"/>
            <returns>The maximum of 0.0f and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextFloat(System.Single,System.Single)">
            <summary>
            Returns the maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            This is often able to get closer to outerBound than <see cref="M:ShaiRandom.Generators.AbstractRandom.NextFloat(System.Single,System.Single)"/> can.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextDouble">
            <summary>
            Always returns 1.0 - AbstractRandom.DoubleAdjust.
            </summary>
            <returns>1.0 - AbstractRandom.DoubleAdjust</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextDouble(System.Double)">
            <summary>
            Returns the maximum of 0.0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDouble(System.Double)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="outerBound"/>
            <returns>The maximum of 0.0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextDouble(System.Double,System.Double)">
            <summary>
            Returns the maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            This is often able to get closer to outerBound than <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDouble(System.Double,System.Double)"/> can.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextDecimal">
            <summary>
            Always returns 0.9999999999999999999999999999M.
            </summary>
            <returns>0.9999999999999999999999999999M</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextDecimal(System.Decimal)">
            <summary>
            Returns the maximum of 0.0M and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDecimal(System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="outerBound"/>
            <returns>The maximum of 0.0M and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDecimal(System.Decimal,System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextSparseFloat">
            <summary>
            Always returns 1.0f - AbstractRandom.FloatAdjust.
            </summary>
            <returns>1.0f - AbstractRandom.FloatAdjust.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextSparseFloat(System.Single)">
            <summary>
            Returns the maximum of 0.0f and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The maximum of 0.0f and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextSparseFloat(System.Single,System.Single)">
            <summary>
            Returns the maximum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextSparseDouble">
            <summary>
            Always returns 1.0 - AbstractRandom.DoubleAdjust.
            </summary>
            <returns>1.0 - AbstractRandom.DoubleAdjust</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextSparseDouble(System.Double)">
            <summary>
            Returns the maximum of 0.0 and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The maximum of 0.0 and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextSparseDouble(System.Double,System.Double)">
            <summary>
            Returns the maximum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveDouble">
            <summary>
            Always returns 1.0.
            </summary>
            <returns>1.0</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveDouble(System.Double)">
            <summary>
            Returns the maximum of 0.0 and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The maximum of 0.0 and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveDouble(System.Double,System.Double)">
            <summary>
            Returns the maximum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveFloat">
            <summary>
            Always returns 1.0f.
            </summary>
            <returns>1.0f</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveFloat(System.Single)">
            <summary>
            Returns the maximum of 0.0f and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The maximum of 0.0f and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveFloat(System.Single,System.Single)">
            <summary>
            Returns the maximum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveDecimal">
            <summary>
            Always returns 1.0M.
            </summary>
            <returns>1.0M</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveDecimal(System.Decimal)">
            <summary>
            Returns the maximum of 0.0M and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The maximum of 0.0M and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextInclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the maximum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveDouble">
            <summary>
            Always returns 1.0 - AbstractRandom.DoubleAdjust.
            </summary>
            <returns>1.0 - AbstractRandom.DoubleAdjust</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveDouble(System.Double)">
            <summary>
            Returns the maximum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble(System.Double)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="outerBound"/>
            <returns>The maximum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveDouble(System.Double,System.Double)">
            <summary>
            Returns the maximum of the defined bounds (considering both bounds to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble(System.Double,System.Double)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The maximum of the defined bounds (considering both bounds to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveFloat">
            <summary>
            Always returns 1.0f - AbstractRandom.FloatAdjust.
            </summary>
            <returns>1.0 - AbstractRandom.FloatAdjust</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveFloat(System.Single)">
            <summary>
            Returns the maximum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveFloat(System.Single)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="outerBound"/>
            <returns>The maximum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveFloat(System.Single,System.Single)">
            <summary>
            Returns the minimum of the defined bounds (considering both bounds to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveFloat(System.Single,System.Single)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> or <paramref name="innerBound"/> inclusive with some values.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering both bounds to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveDecimal">
            <summary>
            Always returns 0.9999999999999999999999999999M.
            </summary>
            <returns>0.9999999999999999999999999999M</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveDecimal(System.Decimal)">
            <summary>
            Returns the maximum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDecimal(System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="outerBound"/>
            <returns>The maximum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MaxRandom.NextExclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the minimum of the defined bounds (considering both bounds to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDecimal(System.Decimal,System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering both bounds to be exclusive)</returns>
        </member>
        <member name="T:ShaiRandom.Generators.MinRandom">
             <summary>
             A "random" number generator which implements all generation functions such that they return the minimum possible
             value that could be returned by an actual generator implementing the <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> contract.
             For example, MinRandom.NextULong() always returns <see cref="F:System.UInt64.MinValue"/>,
             MinRandom.NextULong(1, 3) always returns 1, and so on.
             </summary>
             <remarks>
             This generator can be useful for unit testing or debugging algorithms that use random number generators, since
             bugs involving improper bounds tend to show up at either extreme of valid bounds.
            
             Although this generator does not inherit from <see cref="T:ShaiRandom.Generators.AbstractRandom"/>, it uses the same conceptual processes
             for determining min and max numbers that can be returned; so in terms of how exclusive bounds are handled, this
             generator performs identically to the theoretical minimums for the same values in an AbstractRandom.
             </remarks>
        </member>
        <member name="F:ShaiRandom.Generators.MinRandom.Instance">
            <summary>
            Static instance of this generator that can be used in most cases to prevent allocation, since this generator
            has no associated state.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MinRandom.StateCount">
            <inheritdoc />
        </member>
        <member name="P:ShaiRandom.Generators.MinRandom.SupportsReadAccess">
            <summary>
            Doesn't support reading state, since there is no state to read.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MinRandom.SupportsWriteAccess">
            <summary>
            Doesn't support setting state, since there is no state to set.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MinRandom.SupportsSkip">
            <summary>
            Supports <see cref="M:ShaiRandom.Generators.MinRandom.Skip(System.UInt64)"/>, but it is equivalent to <see cref="M:ShaiRandom.Generators.MinRandom.NextULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MinRandom.SupportsLeap">
            <summary>
            Supports <see cref="M:ShaiRandom.Generators.MinRandom.Leap"/>, but it is equivalent to <see cref="M:ShaiRandom.Generators.MinRandom.NextULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MinRandom.SupportsPrevious">
            <summary>
            Supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MinRandom.DefaultTag">
            <summary>
            Tag for this case is "MinR".
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.Copy">
            <summary>
            Returns a new MinRandom generator; this must be equivalent to the current one, since there is no state.
            </summary>
            <returns>A new MinRandom generator.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.StringSerialize">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.StringDeserialize(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.SelectState(System.Int32)">
            <summary>
            Not supported; this generator has no state.
            </summary>
            <param name="selection"/>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Not supported; this generator has no state.
            </summary>
            <param name="selection"/>
            <param name="value"/>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.Seed(System.UInt64)">
            <summary>
            Does nothing, since this generator has no state.
            </summary>
            <param name="seed"/>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.Skip(System.UInt64)">
            <summary>
            Does nothing since the return value is always predetermined based on the parameters or implicit bounds.
            </summary>
            <param name="distance"/>
            <returns><see cref="F:System.UInt64.MinValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.Leap">
            <summary>
            Does nothing since the return value is always predetermined based on the parameters or implicit bounds.
            </summary>
            <returns><see cref="F:System.UInt64.MinValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.PreviousULong">
            <summary>
            Does nothing, since this generator has no state.  Always returns <see cref="F:System.UInt64.MinValue"/>.
            </summary>
            <returns><see cref="F:System.UInt64.MinValue"/></returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextULong">
            <summary>
            Always returns <see cref="F:System.UInt64.MinValue"/>.
            </summary>
            <returns><see cref="F:System.UInt64.MinValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextLong">
            <summary>
            Always returns <see cref="F:System.Int64.MinValue"/>.
            </summary>
            <returns><see cref="F:System.Int64.MinValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextULong(System.UInt64)">
            <summary>
            Returns the minimum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive).
            </summary>
            <param name="bound"/>
            <returns>The minimum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextLong(System.Int64)">
            <summary>
            Returns the minimum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="outerBound"/>
            <returns>The minimum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextULong(System.UInt64,System.UInt64)">
            <summary>
            Returns the minimum of the defined bounds (considering <paramref name="outer"/> to be exclusive).
            </summary>
            <param name="inner"/>
            <param name="outer"/>
            <returns>The minimum of the defined bounds (considering <paramref name="outer"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextLong(System.Int64,System.Int64)">
            <summary>
            Returns the minimum of the defined bounds (considering <paramref name="outer"/> to be exclusive).
            </summary>
            <param name="inner"/>
            <param name="outer"/>
            <returns>The minimum of the defined bounds (considering <paramref name="outer"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextBits(System.Int32)">
            <summary>
            Always returns 0 (no bits set).
            </summary>
            <param name="bits"/>
            <returns>A number with no bits set (eg. 0)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextBytes(System.Span{System.Byte})">
            <summary>
            Fills the buffer with <see cref="F:System.Byte.MinValue"/>.
            </summary>
            <param name="bytes">The buffer to fill.</param>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInt">
            <summary>
            Always returns <see cref="F:System.Int32.MinValue"/>.
            </summary>
            <returns><see cref="F:System.Int32.MinValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextUInt">
            <summary>
            Always returns <see cref="F:System.UInt32.MinValue"/>.
            </summary>
            <returns><see cref="F:System.UInt32.MinValue"/>.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextUInt(System.UInt32)">
            <summary>
            Returns the minimum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive).
            </summary>
            <param name="bound"/>
            <returns>The minimum of 0 and the defined bound (considering <paramref name="bound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInt(System.Int32)">
            <summary>
            Returns the minimum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="outerBound"/>
            <returns>The minimum of 0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextUInt(System.UInt32,System.UInt32)">
            <summary>
            Returns the minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInt(System.Int32,System.Int32)">
            <summary>
            Returns the minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextBool">
            <summary>
            Always returns false.
            </summary>
            <returns>False</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextFloat">
            <summary>
            Always returns 0.0f.
            </summary>
            <returns>0.0f</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextFloat(System.Single)">
            <summary>
            Returns the minimum of 0.0f and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextFloat(System.Single)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="outerBound"/>
            <returns>The minimum of 0.0f and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextFloat(System.Single,System.Single)">
            <summary>
            Returns the minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextFloat(System.Single,System.Single)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextDouble">
            <summary>
            Always returns 0.0.
            </summary>
            <returns>0.0</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextDouble(System.Double)">
            <summary>
            Returns the minimum of 0.0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDouble(System.Double)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="outerBound"/>
            <returns>The minimum of 0.0 and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextDouble(System.Double,System.Double)">
            <summary>
            Returns the minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDouble(System.Double,System.Double)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextDecimal">
            <summary>
            Always returns 0.0M.
            </summary>
            <returns>0.0M</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextDecimal(System.Decimal)">
            <summary>
            Returns the minimum of 0.0M and the defined bound (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDecimal(System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="outerBound"/>
            <returns>The minimum of 0.0M and the defined bound (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextDecimal(System.Decimal,System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextSparseFloat">
            <summary>
            Always returns 0.0f.
            </summary>
            <returns>0.0f</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextSparseFloat(System.Single)">
            <summary>
            Returns the minimum of 0.0f and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The minimum of 0.0f and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextSparseFloat(System.Single,System.Single)">
            <summary>
            Returns the minimum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextSparseDouble">
            <summary>
            Always returns 0.0.
            </summary>
            <returns>0.0</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextSparseDouble(System.Double)">
            <summary>
            Returns the minimum of 0.0 and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The minimum of 0.0 and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextSparseDouble(System.Double,System.Double)">
            <summary>
            Returns the minimum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveDouble">
            <summary>
            Always returns 0.0.
            </summary>
            <returns>0.0</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveDouble(System.Double)">
            <summary>
            Returns the minimum of 0.0 and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The minimum of 0.0 and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveDouble(System.Double,System.Double)">
            <summary>
            Returns the minimum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveFloat">
            <summary>
            Always returns 0.0f.
            </summary>
            <returns>0.0f</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveFloat(System.Single)">
            <summary>
            Returns the minimum of 0.0f and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The minimum of 0.0f and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveFloat(System.Single,System.Single)">
            <summary>
            Returns the minimum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveDecimal">
            <summary>
            Always returns 0.0M.
            </summary>
            <returns>0.0M</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveDecimal(System.Decimal)">
            <summary>
            Returns the minimum of 0.0M and the defined bound.
            </summary>
            <param name="outerBound"/>
            <returns>The minimum of 0.0M and the defined bound</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextInclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the minimum of the defined bounds.
            </summary>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveDouble">
            <summary>
            Always returns 1.0842021724855044E-19 (the minimum value of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble"/>.
            </summary>
            <returns>1.0842021724855044E-19</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveDouble(System.Double)">
            <summary>
            Returns the minimum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble(System.Double)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="outerBound"/>
            <returns>The minimum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveDouble(System.Double,System.Double)">
            <summary>
            Returns the minimum of the defined bounds (considering both bounds to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDouble(System.Double,System.Double)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering both bounds to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveFloat">
            <summary>
            Always returns 1.0842022E-19f.
            </summary>
            <returns>1.0842022E-19f</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveFloat(System.Single)">
            <summary>
            Returns the minimum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveFloat(System.Single)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> inclusive with some values.
            </remarks>
            <param name="outerBound"/>
            <returns>The minimum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveFloat(System.Single,System.Single)">
            <summary>
            Returns the minimum of the defined bounds (considering both bounds to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveFloat(System.Single,System.Single)"/>
            in terms of how close it can get to given bounds, etc.  Currently, it also shares issues with the AbstractRandom
            implementation which can cause it to return <paramref name="outerBound"/> or <paramref name="innerBound"/> inclusive with some values.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering both bounds to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveDecimal">
            <summary>
            Always returns 0.0000000000000000000000000001M.
            </summary>
            <returns>0.0000000000000000000000000001M</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveDecimal(System.Decimal)">
            <summary>
            Returns the minimum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDecimal(System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="outerBound"/>
            <returns>The minimum of 0 and the defined bound (considering both 0 and <paramref name="outerBound"/> to be exclusive)</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MinRandom.NextExclusiveDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns the minimum of the defined bounds (considering both bounds to be exclusive).
            </summary>
            <remarks>
            In general, this function has the same characteristics of <see cref="M:ShaiRandom.Generators.AbstractRandom.NextExclusiveDecimal(System.Decimal,System.Decimal)"/>
            in terms of how close it can get to given bounds, etc.
            </remarks>
            <param name="innerBound"/>
            <param name="outerBound"/>
            <returns>The minimum of the defined bounds (considering both bounds to be exclusive)</returns>
        </member>
        <member name="T:ShaiRandom.Generators.MizuchiRandom">
            <summary>
            It's an AbstractRandom with 2 states, more here later.
            </summary>
            <remarks>
            This one supports <see cref="M:ShaiRandom.Generators.MizuchiRandom.PreviousULong"/>, but not <see cref="M:ShaiRandom.Generators.AbstractRandom.Skip(System.UInt64)"/>.
            It's based on a permutation of an LCG, like PCG-Random by way of SplitMix64. A mizuchi is a mythological river dragon,
            and since this supports multiple streams (by changing StateB), the waterway theme seemed fitting.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.DefaultTag">
            <summary>
            The identifying tag here is "MizR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.StateA">
            <summary>
            The first state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.StateB">
            <summary>
            The second state; can be any odd ulong (the last bit must be 1).
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.#ctor">
            <summary>
            Creates a new MizuchiRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new MizuchiRandom with the given seed; any ulong value is permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.MizuchiRandom.Seed(System.UInt64)">Seed(ulong)</see> to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Creates a new MizuchiRandom with the given two states; all ulong values are permitted, but stateB will always be made odd.
            </summary>
            <remarks>
            The states will be used verbatim, except if stateB is even (then 1 is added to it).
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong; if even, 1 will be added.</param>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.StateCount">
            <summary>
            This generator has 2 ulong states, so this returns 2.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.MizuchiRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.MizuchiRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.MizuchiRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.MizuchiRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be 0 or 1; if it is any other value this gets state A as if 0 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0 or 1.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0 and 1 refer to states A and B, and if the selection is anything else, this treats it as 0 and sets stateA.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0 or 1.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.Seed(System.UInt64)">
            <summary>
            This initializes all states of the generator to different pseudo-random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here.
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.SetState(System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given two state variables.
            </summary>
            <remarks>
            This is the same as setting StateA and StateB as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.MizuchiRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the states have very little or no correlation, because certain very-similar combinations of seeds produce correlated sequences.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any odd ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.MizuchiRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.RomuTrioRandom">
            <summary>
            It's an AbstractRandom with 3 states that implements the RomuTrio algorithm for fast ulong generation. This has no minimum period guarantee,
            but is very likely to have a long period if seeded with <see cref="M:ShaiRandom.Generators.RomuTrioRandom.Seed(System.UInt64)"/>.
            </summary>
            <remarks>
            See https://romu-random.org/ for more on this algorithm. This implementation is derived from https://github.com/bgrainger/RomuRandom .
            Be aware that if this is ever allowed to have an all-zero state, it will never escape that state (this is also true for <see cref="T:ShaiRandom.Generators.Xorshift128PlusRandom"/>
            and <see cref="T:ShaiRandom.Generators.Xoshiro256StarStarRandom"/>).
            <br />
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/> or <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.DefaultTag">
            <summary>
            The identifying tag here is "RTrR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.StateA">
            <summary>
            The first state; can be any ulong except that the whole state must not all be 0.
            </summary>
            <remarks>
            If this has just been set to some value, then the next call to <see cref="M:ShaiRandom.Generators.RomuTrioRandom.NextULong">NextULong</see> will return that value as-is. Later calls will be more random.</remarks>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.StateB">
            <summary>
            The second state; can be any ulong except that the whole state must not all be 0.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.StateC">
            <summary>
            The third state; can be any ulong except that the whole state must not all be 0.
            </summary>
            <remarks>If all other states are 0, and this would be set to 0, then this is instead set to 0xFFFFFFFFFFFFFFFFUL.</remarks>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.#ctor">
            <summary>
            Creates a new RomuTrioRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new RomuTrioRandom with the given seed; any ulong value is permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.RomuTrioRandom.Seed(System.UInt64)">Seed(ulong)</see> to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new RomuTrioRandom with the given three states; all ulong values are permitted except for all 0s.
            </summary>
            <remarks>
            The states will be used verbatim unless all states are 0, in which case stateC is considered <see cref="F:System.UInt64.MaxValue">ulong.MaxValue</see>.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.StateCount">
            <summary>
            This generator has 3 ulong states, so this returns 3.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.RomuTrioRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.RomuTrioRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.RomuTrioRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 2, inclusive; if it is any other value this gets state C as if 2 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, or 2.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, and 2 refer to states A, B, and C,  and if the selection is anything else, this treats it as 2 and sets stateC.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, or 2.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.Seed(System.UInt64)">
            <summary>
            This initializes all states of the generator to different pseudo-random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here, all with a different
            first value returned by <see cref="M:ShaiRandom.Generators.RomuTrioRandom.NextULong">NextULong()</see> (because stateA is guaranteed to be
            different for every different seed).
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.SetState(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given three state variables.
            </summary>
            <remarks>
            This is the same as setting StateA, setStateB, and StateC as a group.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any ulong.</param>
            <param name="stateC">The third state; can be any ulong</param>
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.RomuTrioRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.ScruffRandom">
             <summary>
             It's an AbstractRandom with 4 states, built around a "medium-chaotic" construction with a guaranteed minimum period of 2 to the 64, but likely much longer.
             </summary>
             <remarks>
             Tommy Ettinger:
             This is "medium-chaotic" because it has four states and performs five math operations per update (a multiplication, a bitwise rotation, an add, a XOR, and a
             subtraction), with a good compiler able to handle those as instruction-level parallel operations.
            
             This generator isn't quite as fast as WhiskerRandom (on the JVM), but offers a strong period guarantee, and has been tested just as thoroughly.
             </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.DefaultTag">
            <summary>
            The identifying tag here is "ScrR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.StateA">
            <summary>
            The first state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.StateB">
            <summary>
            The second state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.StateC">
            <summary>
            The third state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.StateD">
            <summary>
            The fourth state; can be any ulong.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.#ctor">
            <summary>
            Creates a new ScruffRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new ScruffRandom with the given seed; all ulong values are permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.ScruffRandom.SetSeed(ShaiRandom.Generators.ScruffRandom,System.UInt64)">SetSeed(ScruffRandom, ulong)</see>, to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new ScruffRandom with the given four states; all ulong values are permitted.
            </summary>
            <remarks>
            The states will be used verbatim.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
            <param name="stateD">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.StateCount">
            <summary>
            This generator has 4 ulong states, so this returns 4.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.ScruffRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.ScruffRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.ScruffRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.ScruffRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 3, inclusive; if it is any other value this gets state D as if 3 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, 2, or 3.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, 2, and 3 refer to states A, B, C, and D,  and if the selection is anything else, this treats it as 3 and sets stateD.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, 2, or 3.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.Seed(System.UInt64)">
            <summary>
            Initializes all 4 states of the generator to random values based on the given seed.
            </summary>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given four state variables.
            </summary>
            <remarks>
            This is the same as setting StateA, StateB, StateC, and StateD as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.ScruffRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the value for stateD (in particular) is already adequately random; the first call to NextULong(), if it is made immediately after calling this, will return stateD as-is.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any ulong.</param>
            <param name="stateC">The third state; can be any ulong.</param>
            <param name="stateD">The fourth state; this will be returned as-is if the next call is to NextULong().</param>
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.ScruffRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.StrangerRandom">
            <summary>
            It's an AbstractRandom with 4 states, with a good guaranteed minimum period, (2 to the 65) - 2.
            </summary>
            <remarks>
            This generator is similar in many ways to <see cref="T:ShaiRandom.Generators.TrimRandom"/>; both avoid using multiplication, have a 20-digit minimum period, and are rather high-quality.
            StrangerRandom isn't as fast, however. This generator uses interleaved two-xorshift generators (using the only possible constants for a two-xorshift generator with
            64-bit state, 7 and 9), and feeds their current states into a "chaotic" construction with the other two states. Because each xorshift generator has a period of
            (2 to the 64) - 1, and it takes two generated ulongs to complete one xorshift generation, this guarantees that the xorshifts will cycle after (2 to the 65) - 2 results.
            The chaotic other states will usually lengthen the period significantly on top of that.
            <br />
            This supports <see cref="M:ShaiRandom.Generators.StrangerRandom.PreviousULong"/> but not <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.DefaultTag">
            <summary>
            The identifying tag here is "StrR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.StateA">
            <summary>
            The first state; can be any ulong except 0.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.StateB">
            <summary>
            The second state; can be any ulong except 0.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.StateC">
            <summary>
            The third state; can be any ulong. If this has just been set to some value, then the next call to
            <see cref="M:ShaiRandom.Generators.StrangerRandom.NextULong"/> will return that value as-is. Later calls will be more random.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.StateD">
            <summary>
            The fourth state; can be any ulong.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.Jump(System.UInt64)">
            <summary>
            Used to get a value for stateB that is very distant from the given state in a xorshift generator sequence.
            </summary>
            <remarks>
            This produces a state that is equivalent to stepping backwards 7046029254386353131 steps from state in the xorshift generator
            sequence this uses for states A and B.
            </remarks>
            <param name="state">Must be non-zero, but can otherwise be any ulong.</param>
            <returns>Another state that will be very distant in a xorshift generator sequence, suitable as a "StateB" when state is "StateA."</returns>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.#ctor">
            <summary>
            Creates a new StrangerRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new StrangerRandom with the given seed; any ulong value is permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.StrangerRandom.Seed(System.UInt64)">Seed(ulong)</see> to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new FourWheelRandom with the given stateA to be used to get values for stateA and stateB, plus the given
            stateC and stateD that will be used verbatim.
            </summary>
            <remarks>
            For stateA, 0 is not permitted, but all other ulongs are. For stateC and stateD, all ulong values are permitted.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
            <param name="stateD">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new FourWheelRandom with the given four states.
            </summary>
            <remarks>
            0 is not permitted for stateA or stateB, but all states are otherwise used verbatim.
            </remarks>
            <param name="stateA">Any ulong except 0.</param>
            <param name="stateB">Any ulong except 0.</param>
            <param name="stateC">Any ulong.</param>
            <param name="stateD">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.StateCount">
            <summary>
            This generator has 4 ulong states, so this returns 4.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.StrangerRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.StrangerRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/> currently; it could in a future release.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.StrangerRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.StrangerRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 3, inclusive; if it is any other value this gets state D as if 3 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, 2, or 3.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, 2, and 3 refer to states A, B, C, and D,  and if the selection is anything else, this treats it as 3 and sets stateD.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, 2, or 3.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.Seed(System.UInt64)">
            <summary>
            Initializes all 4 states of the generator to random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here, all with a different first value returned
            by <see cref="M:ShaiRandom.Generators.StrangerRandom.NextULong">NextUlong()</see> (because stateC is guaranteed to be different for every different seed).
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given four state variables.
            </summary>
            <remarks>
            This is the same as setting StateA, StateB, StateC, and StateD as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.StrangerRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the value for stateD (in particular) is already adequately random; the first call to NextULong(), if it is made immediately after calling this, will return stateD as-is.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any ulong.</param>
            <param name="stateC">The third state; can be any ulong.</param>
            <param name="stateD">The fourth state; this will be returned as-is if the next call is to NextULong().</param>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.SetState(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the A and B states in this using the giveb stateA, and sets states C and D to stateC and stateD verbatim.
            This uses state A verbatim unless it is 0, and sets state B based on state A so it is very separated in its sequence.
            </summary>
            <param name="stateA">Can be any ulong except 0.</param>
            <param name="stateC">Can be any ulong.</param>
            <param name="stateD">Can be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.PreviousULong">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Generators.StrangerRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.TricycleRandom">
            <summary>
            It's an AbstractRandom with 3 states, with no guarantee of a minimum period but a statistically-likely high actual period.
            </summary>
            <remarks>
            This is like <see cref="T:ShaiRandom.Generators.RomuTrioRandom"/>, which also has three states and no guarantee of a minimum period for a given stream,
            but unlike RomuTrioRandom, this won't get stuck in a perpetual-zero state if all three states are 0. It may be faster or slower
            than RomuTrioRandom, though it is usually slower by a fraction of a nanosecond.
            <br />
            This supports <see cref="M:ShaiRandom.Generators.TricycleRandom.PreviousULong"/> but not <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.DefaultTag">
            <summary>
            The identifying tag here is "TriR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.StateA">
            <summary>
            The first state; can be any ulong.
            </summary>
            <remarks> this has just been set to some value, then the next call to<see cref="M:ShaiRandom.Generators.TricycleRandom.NextULong">NextULong</see> will return that value as-is. Later calls will be more random.</remarks>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.StateB">
            <summary>
            The second state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.StateC">
            <summary>
            The third state; can be any ulong.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.#ctor">
            <summary>
            Creates a new TricycleRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new TricycleRandom with the given seed; any ulong value is permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.TricycleRandom.Seed(System.UInt64)">Seed(ulong)</see> to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new RomuTrioRandom with the given three states; all ulong values are permitted.
            </summary>
            <remarks>
            The states will be used verbatim.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.StateCount">
            <summary>
            This generator has 3 ulong states, so this returns 3.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.TricycleRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.TricycleRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TricycleRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.TricycleRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 2, inclusive; if it is any other value this gets state C as if 2 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, or 2.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, and 2 refer to states A, B, and C,  and if the selection is anything else, this treats it as 2 and sets stateC.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, or 2.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.Seed(System.UInt64)">
            <summary>
            This initializes all states of the generator to different pseudo-random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here, all with a different
            first value returned by <see cref="M:ShaiRandom.Generators.TricycleRandom.NextULong">NextULong()</see> (because stateA is guaranteed to be
            different for every different seed).
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.SetState(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given three state variables.
            </summary>
            <remarks>
            This is the same as setting StateA, setStateB, and StateC as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.TricycleRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the value for stateA (in particular) is already adequately random; the first call to NextULong(), if it is made immediately after calling this, will return stateA as-is.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any ulong.</param>
            <param name="stateC">The third state; can be any ulong</param>
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TricycleRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.TrimRandom">
            <summary>
            It's an AbstractRandom with 4 states, built around a "chaotic" construction combined with a 64-bit counter, guaranteeing a minimum period of 2 to the 64.
            The maximum period varies depending on the starting state, but is virtually guaranteed to be many times longer than the minimum.
            </summary>
            <remarks>
            This is very fast... on the JVM and in CUDA C. It isn't quite as fast on .NET (any version), because smaller state sizes do better here. It's still quite
            high-quality, with no known failing tests. This continues to get robust results on the "remortality" test after over 150PB of tested data.
            <br />
            This supports <see cref="M:ShaiRandom.Generators.TrimRandom.PreviousULong"/> but not <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.DefaultTag">
            <summary>
            The identifying tag here is "TrmR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.StateA">
            <summary>
            The first state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.StateB">
            <summary>
            The second state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.StateC">
            <summary>
            The third state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.StateD">
            <summary>
            The fourth state; can be any ulong.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.#ctor">
            <summary>
            Creates a new TrimRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new TrimRandom with the given seed; all ulong values are permitted.
            </summary>
            <remarks>
            The seed will be passed to the equivalent of <see cref="M:ShaiRandom.Generators.TrimRandom.Seed(System.UInt64)">Seed(ulong)</see>, to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new TrimRandom with the given four states; all ulong values are permitted.
            </summary>
            <remarks>
            The states will be used verbatim.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
            <param name="stateD">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.StateCount">
            <summary>
            This generator has 4 ulong states, so this returns 4.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.TrimRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.TrimRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.TrimRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.TrimRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 3, inclusive; if it is any other value this gets state D as if 3 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, 2, or 3.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, 2, and 3 refer to states A, B, C, and D,  and if the selection is anything else, this treats it as 3 and sets stateD.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, 2, or 3.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.Seed(System.UInt64)">
            <summary>
            Initializes all 4 states of the generator to random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here, all with a different first value returned
            by <see cref="M:ShaiRandom.Generators.TrimRandom.NextULong">NextUlong()</see>.
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given four state variables.
            </summary>
            <remarks>
            This is the same as setting StateA, StateB, StateC, and StateD as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.TrimRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the value for stateC (in particular) is already adequately random; the first call to NextULong(), if it is made immediately after calling this, will return stateC as-is.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any ulong.</param>
            <param name="stateC">The third state; this will be returned as-is if the next call is to NextULong().</param>
            <param name="stateD">The fourth state; can be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.TrimRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.WhiskerRandom">
            <summary>
            It's a simpler AbstractRandom with 4 states, built around a "chaotic" construction with no guarantee of a minimum period, but likely to be a very long one.
            </summary>
            <remarks>
            Tommy Ettinger:
            This is "simpler" because it has four states and performs four math operations per update (a multiplication, a bitwise rotation, an add, and a XOR), with a good
            compiler able to handle those as instruction-level parallel operations.
            
            This is the fastest generator I've written so far... when run on on the JVM. It isn't as fast on .NET (any version), because smaller state sizes do better here.
            It's still very high-quality, passing pretty much any test for non-cryptographic randomness I've thrown at it. That includes 64TB of PractRand without anomalies,
            179 PB of ReMortality without suspect results, and generally frequent usage throughout my other code. Not having a guarantee of a minimum period is sometimes a
            concern if a generator would be used for many generations, but the odds of encountering a period less than, say, a billion are effectively too small to measure.
            This is the same argument RomuTrio makes to justify its unknown minimum period but probable high actual period, but unlike RomuTrio, WhiskerRandom doesn't have
            a glaringly-obvious issue when all states are 0.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.DefaultTag">
            <summary>
            The identifying tag here is "WhiR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.StateA">
            <summary>
            The first state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.StateB">
            <summary>
            The second state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.StateC">
            <summary>
            The third state; can be any ulong.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.StateD">
            <summary>
            The fourth state; can be any ulong.
            </summary>
            <remarks>If this has just been set to some value, then the next call to <see cref="M:ShaiRandom.Generators.WhiskerRandom.NextULong">NextUlong()</see> will return that value as-is. Later calls will be more random.</remarks>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.#ctor">
            <summary>
            Creates a new WhiskerRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new WhiskerRandom with the given seed; all ulong values are permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.WhiskerRandom.SetSeed(ShaiRandom.Generators.WhiskerRandom,System.UInt64)">SetSeed(WhiskerRandom, ulong)</see>, to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new WhiskerRandom with the given four states; all ulong values are permitted.
            </summary>
            <remarks>
            The states will be used verbatim.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
            <param name="stateD">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.StateCount">
            <summary>
            This generator has 4 ulong states, so this returns 4.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.WhiskerRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.WhiskerRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.SupportsLeap">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.WhiskerRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.WhiskerRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 3, inclusive; if it is any other value this gets state D as if 3 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, 2, or 3.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, 2, and 3 refer to states A, B, C, and D, and if the selection is anything else, this treats it as 3 and sets stateD.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, 2, or 3.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.Seed(System.UInt64)">
            <summary>
            Initializes all 4 states of the generator to random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here, all with a different first value returned
            by <see cref="M:ShaiRandom.Generators.WhiskerRandom.NextULong">NextUlong()</see> (because stateD is guaranteed to be different for every different seed).
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given four state variables.
            </summary>
            <remarks>
            This is the same as setting StateA, StateB, StateC, and StateD as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.WhiskerRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the value for stateD (in particular) is already adequately random; the first call to NextULong(), if it is made immediately after calling this, will return stateD as-is.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any ulong.</param>
            <param name="stateC">The third state; can be any ulong.</param>
            <param name="stateD">The fourth state; this will be returned as-is if the next call is to NextULong().</param>
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.WhiskerRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Generators.Xorshift128PlusRandom">
            <summary>
            It's an AbstractRandom with 2 states; low-quality, and not recommended for external use.
            It is pretty fast though, and the low quality is primarily a problem with lower bits.
            </summary>
            <remarks>
            The algorithm here is xorshift128+ , which is quite old now; see https://xoshiro.di.unimi.it/xorshift.php for more information on this family of algorithms.
            Modern JavaScript engines in browsers do still use xorshift128+, but they also introduce various mitigating measures to prevent tampering with the state.
            JavaScript also doesn't have a 64-bit integer type, so the serious weakness in the returned low bits can be mostly ignored by only using the upper bits.
            If statistical quality is a concern, <see cref="T:ShaiRandom.Generators.Xoshiro256StarStarRandom"/> is a similar generator but has much higher quality.
            <br />
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/> or <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>,
            but does support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.DefaultTag">
            <summary>
            The identifying tag here is "XSPR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.StateA">
            <summary>
            The first state; can be any ulong unless both states are 0.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.StateB">
            <summary>
            The second state; can be any ulong unless both states are 0.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.#ctor">
            <summary>
            Creates a new Xorshift128PlusRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new Xorshift128PlusRandom with the given seed; any ulong value is permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.Xorshift128PlusRandom.Seed(System.UInt64)">Seed(ulong)</see> to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Creates a new Xorshift128PlusRandom with the given two states; all ulong values are permitted, but stateB will always be made odd.
            </summary>
            <remarks>
            The states will be used verbatim, except if both are 0 (then StateA becomes ulong.MaxValue).
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong; if even, 1 will be added.</param>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.StateCount">
            <summary>
            This generator has 2 ulong states, so this returns 2.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.Xorshift128PlusRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.Xorshift128PlusRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.SupportsLeap">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>, with one call to Leap() equivalent to <code>Math.Pow(2, 64)</code> calls to <see cref="M:ShaiRandom.Generators.Xorshift128PlusRandom.NextULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xorshift128PlusRandom.SupportsPrevious">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be 0 or 1; if it is any other value this gets state A as if 0 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0 or 1.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0 and 1 refer to states A and B, and if the selection is anything else, this treats it as 0 and sets stateA.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0 or 1.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.Seed(System.UInt64)">
            <summary>
            This initializes all states of the generator to different pseudo-random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here.
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.SetState(System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given two state variables.
            </summary>
            <remarks>
            This is the same as setting StateA and StateB as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.Xorshift128PlusRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the states have very little or no correlation, because certain very-similar combinations of seeds produce correlated sequences.
            </remarks>
            <param name="stateA">The first state; can be any ulong.</param>
            <param name="stateB">The second state; can be any odd ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.Copy">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xorshift128PlusRandom.Leap">
            <summary>
            Jumps extremely far in the generator's sequence, such that it requires <code>Math.Pow(2, 64)</code> calls to Leap() to complete
            a cycle through the generator's entire sequence. This can be used to create over 18 quintillion substreams of this generator's
            sequence, each with a period of <code>Math.Pow(2, 64)</code>.
            </summary>
            <returns>The result of what NextULong() would return if it was called at the state this jumped to.</returns>
        </member>
        <member name="T:ShaiRandom.Generators.Xoshiro256StarStarRandom">
            <summary>
            It's an AbstractRandom with 4 states, implementing a known-rather-good algorithm that is 4-dimensionally equidistributed.
            </summary>
            <remarks>
            Being 4-dimensionally equidistributed means this produces every group of 4 consecutive ulong values with equal likelihood
            (except for four 0s, which this never returns consecutively). This generator is not perfect (it isn't as fast as most others
            on .NET, and there's a known problem if all results are multiplied by a constant with a specific last byte in its 64 bits),
            but it's very hard to get this level of equidistribution and keep up competitive speed. The algorithm here is xoshiro256** ;
            see https://prng.di.unimi.it/ for more information on this family of algorithms.
            <br />
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/> or <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.DefaultTag">
            <summary>
            The identifying tag here is "XSSR" .
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.StateA">
            <summary>
            The first state; can be any ulong except that the whole state must not all be 0.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.StateB">
            <summary>
            The second state; can be any ulong except that the whole state must not all be 0.
            </summary>
            <remarks>
            This is the state that is scrambled and returned; if it is 0 before a number is generated, then the next number will be 0.
            </remarks>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.StateC">
            <summary>
            The third state; can be any ulong except that the whole state must not all be 0.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.StateD">
            <summary>
            The fourth state; can be any ulong except that the whole state must not all be 0.
            </summary>
            <remarks>If all other states are 0, and this would be set to 0, then this is instead set to 0xFFFFFFFFFFFFFFFFUL.</remarks>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.#ctor">
            <summary>
            Creates a new Xoshiro256StarStarRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.#ctor(System.UInt64)">
            <summary>
            Creates a new Xoshiro256StarStarRandom with the given seed; all ulong values are permitted.
            </summary>
            <remarks>
            The seed will be passed to <see cref="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.SetSeed(ShaiRandom.Generators.Xoshiro256StarStarRandom,System.UInt64)">SetSeed(Xoshiro256StarStarRandom, ulong)</see>, to attempt to adequately distribute the seed randomly.
            </remarks>
            <param name="seed">Any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a new Xoshiro256StarStarRandom with the given four states; all ulong values are permitted except for when all states are 0.
            </summary>
            <remarks>
            The states will be used verbatim.
            </remarks>
            <param name="stateA">Any ulong.</param>
            <param name="stateB">Any ulong.</param>
            <param name="stateC">Any ulong.</param>
            <param name="stateD">Any ulong.</param>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.StateCount">
            <summary>
            This generator has 4 ulong states, so this returns 4.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.SelectState(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.SetSelectedState(System.Int32,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.SupportsSkip">
            <summary>
            This does not support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.SupportsLeap">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/>, with one call to Leap() equivalent to <code>Math.Pow(2, 192)</code> calls to <see cref="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.NextULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Generators.Xoshiro256StarStarRandom.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.SelectState(System.Int32)">
            <summary>
            Gets the state determined by selection, as-is.
            </summary>
            <remarks>The value for selection should be between 0 and 3, inclusive; if it is any other value this gets state D as if 3 was given.</remarks>
            <param name="selection">used to select which state variable to get; generally 0, 1, 2, or 3.</param>
            <returns>The value of the selected state.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.SetSelectedState(System.Int32,System.UInt64)">
            <summary>
            Sets one of the states, determined by selection, to value, as-is.
            </summary>
            <remarks>
            Selections 0, 1, 2, and 3 refer to states A, B, C, and D,  and if the selection is anything else, this treats it as 3 and sets stateD.
            </remarks>
            <param name="selection">Used to select which state variable to set; generally 0, 1, 2, or 3.</param>
            <param name="value">The exact value to use for the selected state, if valid.</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.Seed(System.UInt64)">
            <summary>
            Initializes all 4 states of the generator to random values based on the given seed.
            </summary>
            <remarks>
            (2 to the 64) possible initial generator states can be produced here, all with a different first value returned
            by <see cref="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.NextULong">NextUlong()</see> (because stateB is guaranteed to be different for every different seed).
            </remarks>
            <param name="seed">The initial seed; may be any ulong.</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Sets the state completely to the given four state variables.
            </summary>
            <remarks>
            This is the same as calling setStateA(ulong), setStateB(ulong), setStateC(ulong), and setStateD(ulong) as a group.
            You may want to call <see cref="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.NextULong">NextUlong()</see> a few times after setting the states like this, unless
            the value for stateB (in particular) is already adequately random; the first call to NextULong(), if it is made immediately after calling this, will return stateB as-is.
            If all parameters are 0 here, this will assign 0xFFFFFFFFFFFFFFFFUL to stateD and 0 to the rest.
            </remarks>
            <param name="stateA">The first state; can be any long.</param>
            <param name="stateB">The second state; can be any long.</param>
            <param name="stateC">The third state; can be any long.</param>
            <param name="stateD">The fourth state; this will be returned as-is if the next call is to NextULong().</param>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.NextSparseDouble">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.Leap">
            <summary>
            Jumps extremely far in the generator's sequence, such that it requires <code>Math.Pow(2, 64)</code> calls to Leap() to complete
            a cycle through the generator's entire sequence. This can be used to create over 18 quintillion substreams of this generator's
            sequence, each with a period of <code>Math.Pow(2, 192)</code>.
            </summary>
            <returns>The result of what NextULong() would return if it was called at the state this jumped to.</returns>
        </member>
        <member name="M:ShaiRandom.Generators.Xoshiro256StarStarRandom.Copy">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.MathUtils">
            <summary>
            A collection of various math approximations and utility functions helpful for creating generators.
            </summary>
        </member>
        <member name="F:ShaiRandom.MathUtils.Tolerance">
            <summary>
              The delta used when comparing doubles.
            </summary>
        </member>
        <member name="M:ShaiRandom.MathUtils.AreEqual(System.Double,System.Double)">
            <summary>
              Safely checks if given doubles are equal.
            </summary>
            <param name="d1">A double.</param>
            <param name="d2">A double.</param>
            <returns>True if given doubles are safely equal, false otherwise.</returns>
        </member>
        <member name="M:ShaiRandom.MathUtils.IsZero(System.Double)">
            <summary>
              Safely checks if given double is zero.
            </summary>
            <param name="d">A double.</param>
            <returns>True if given double is near zero, false otherwise.</returns>
        </member>
        <member name="M:ShaiRandom.MathUtils.Square(System.Double)">
            <summary>
              Fast square power.
            </summary>
            <param name="d">A double.</param>
            <returns>The square of given double.</returns>
        </member>
        <member name="M:ShaiRandom.MathUtils.Gamma(System.Double)">
            <summary>
              Represents an approximation of the Gamma function, using an algorithm by T. J. Stieltjes.
            </summary>
            <remarks>
            This is exactly equivalent to <code>MathUtils.Factorial(x - 1.0)</code> .
            <br />
            The source for this function is here: http://www.luschny.de/math/factorial/approx/SimpleCases.html
            </remarks>
            <param name="x">A double-precision floating point number.</param>
            <returns>
              A double-precision floating point number representing an approximation of Gamma( <paramref name="x"/>).
            </returns>
        </member>
        <member name="M:ShaiRandom.MathUtils.Factorial(System.Double)">
            <summary>
            A close approximation to the factorial function for real numbers, using an algorithm by T. J. Stieltjes.
            </summary>
            <remarks>
            This performs a variable number of multiplications that starts at 1 when x is between 5 and 6, and requires more
            multiplications the lower x goes (to potentially many if x is, for instance, -1000.0, which would need 1006
            multiplications per call). As such, you should try to call this mostly on x values that are positive or have a
            low magnitude.
            <br />
            The source for this function is here: http://www.luschny.de/math/factorial/approx/SimpleCases.html
            </remarks>
            <param name="x">A double; should not be both large and negative.</param>
            <returns>The generalized factorial of the given x, approximated.</returns>
        </member>
        <member name="M:ShaiRandom.MathUtils.Probit(System.Double)">
            <summary>
            A way of taking a double in the (0.0, 1.0) range and mapping it to a Gaussian or normal distribution, so high
            inputs correspond to high outputs, and similarly for the low range.
            </summary>
            <remarks>This is centered on 0.0 and its standard
            deviation seems to be 1.0 . If this is given an input of 0.0
            or less, it returns -38.5, which is slightly less than the result when given <see cref="F:System.Double.MinValue"/>. If it is
            given an input of 1.0 or more, it returns 38.5, which is significantly larger than the result when given the
            largest double less than 1.0 (this value is further from 1.0 than <see cref="F:System.Double.MinValue"/> is from 0.0). If
            given <see cref="F:System.Double.NaN"/>, it returns NaN. It uses an algorithm by Peter John Acklam, as
            implemented by Sherali Karimov.
            <a href="https://web.archive.org/web/20150910002142/http://home.online.no/~pjacklam/notes/invnorm/impl/karimov/StatUtil.java">Original source</a>.
            <a href="https://web.archive.org/web/20151030215612/http://home.online.no/~pjacklam/notes/invnorm/">Information on the algorithm</a>.
            <a href="https://en.wikipedia.org/wiki/Probit_function">Wikipedia's page on the probit function</a> may help, but
            is more likely to just be confusing.
            <br/>
            Acklam's algorithm and Karimov's implementation are both quite fast. This appears faster than generating
            Gaussian-distributed numbers using either the Box-Muller Transform or Marsaglia's Polar Method, though it isn't
            as precise and can't produce as extreme min and max results in the extreme cases they should appear. If given
            a typical uniform random double that's exclusive on 1.0, it won't produce a result higher than
            8.209536145151493, and will only produce results of at least -8.209536145151493 if 0.0 is
            excluded from the inputs (if 0.0 is an input, the result is -38.5).
            <br/>
            This can be used both as an optimization for generating Gaussian random values, and as a way of generating
            Gaussian values that match a pattern present in the inputs (which you could have by using a sub-random sequence
            as the input, such as those produced by a van der Corput, Halton, Sobol or R2 sequence). Most methods of generating
            Gaussian values (e.g. Box-Muller and Marsaglia polar) do not have any way to preserve a particular pattern.
            </remarks>
            <param name="d">should be between 0 and 1, exclusive, but other values are tolerated</param>
            <returns>a normal-distributed double centered on 0.0; all results will be between -38.5 and 38.5, both inclusive</returns>
        </member>
        <member name="M:ShaiRandom.MathUtils.WrapAround(System.Int32,System.Int32)">
             <summary>
             A modified modulo operator, which practically differs from <paramref name="num"/> / <paramref name="wrapTo"/>
             in that it wraps from 0 to <paramref name="wrapTo"/> - 1, as well as from <paramref name="wrapTo"/> - 1 to 0.
             </summary>
             <remarks>
             A modified modulo operator. Returns the result of  the formula
             (<paramref name="num"/> % <paramref name="wrapTo"/> + <paramref name="wrapTo"/>) % <paramref name="wrapTo"/>.
            
             Practically it differs from regular modulo in that the values it returns when negative values for <paramref name="num"/>
             are wrapped around like one would want an array index to (if wrapTo is list.length, -1 wraps to list.length - 1). For example,
             0 % 3 = 0, -1 % 3 = -1, -2 % 3 = -2, -3 % 3 = 0, and so forth, but WrapTo(0, 3) = 0,
             WrapTo(-1, 3) = 2, WrapTo(-2, 3) = 1, WrapTo(-3, 3) = 0, and so forth. This can be useful if you're
             trying to "wrap" a number around at both ends, for example wrap to 3, such that 3 wraps
             to 0, and -1 wraps to 2. This is common if you are wrapping around an array index to the
             length of the array and need to ensure that positive numbers greater than or equal to the
             length of the array wrap to the beginning of the array (index 0), AND that negative
             numbers (under 0) wrap around to the end of the array (Length - 1).
             </remarks>
             <param name="num">The number to wrap.</param>
             <param name="wrapTo">
             The number to wrap to -- the result of the function is as outlined in function
             description, and guaranteed to be between [0, wrapTo - 1], inclusive.
             </param>
             <returns>
             The wrapped result, as outlined in function description. Guaranteed to lie in range [0,
             wrapTo - 1], inclusive.
             </returns>
        </member>
        <member name="T:ShaiRandom.Mixers">
            <summary>
            Static methods that each take a number and scramble or mix it to get a different number, often with a one-to-one relationship between inputs and outputs.
            </summary>
        </member>
        <member name="M:ShaiRandom.Mixers.MixFast(System.UInt64)">
            <summary>
            A fast, medium-quality mixing method that takes its state as a parameter; state is expected to change between calls to this.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixFast(++state)</code> to produce a sequence of different numbers, but any increments are allowed
            (even-number increments are discouraged because they won't be able to produce all outputs, but sometimes their quality will be decent for the numbers they
            can produce). All longs are accepted by this method, and all longs can be produced. Passing 0 here does not cause this to produce 0.
            <br />
            This is a relatively simple unary hash function; it multiplies its input by a large odd-number constant, runs an XLCG step on the result (XORing with one constant,
            then multiplying by another), then xorshifts, multiplies, and xorshifts again before returning. The function is bijective, but not especially strong when the inputs
            don't change by an odd number.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixFast(++state)</code>.</param>
            <returns>Any ulong.</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixIntFast(System.UInt64,System.Int32)">
            <summary>
            Generates a random bounded int between 0 (inclusive) and outerBound (exclusive) using <see cref="M:ShaiRandom.Mixers.MixFast(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixIntFast(++state, bound)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixIntFast(++state, bound)</code>.</param>
            <param name="outerBound">The outer exclusive bound; may be positive or negative.</param>
            <returns>An int between 0 (inclusive) and outerBound (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixLongFast(System.UInt64,System.Int64,System.Int64)">
            <summary>
            Generates a random bounded long between innerBound (inclusive) and outerBound (exclusive) using <see cref="M:ShaiRandom.Mixers.MixFast(System.UInt64)"/> internally.
            </summary>
            <remarks>
            This can be used to generate longs in any range less broad than the full set of possible long results (to generate any long, cast <see cref="M:ShaiRandom.Mixers.MixFast(System.UInt64)"/> to long).
            It can also be used to generate int values with arbitrary inner and outer bounds, just by giving ints for the bounds and casting the result to an int.
            <br/>
            It is suggested that you use <code>Mixers.MixLongFast(++state, innerBound, outerBound)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixLongFast(++state, innerBound, outerBound)</code>.</param>
            <param name="innerBound">The inner inclusive bound; may be positive or negative.</param>
            <param name="outerBound">The outer exclusive bound; may be positive or negative.</param>
            <returns>A long between innerBound (inclusive) and outerBound (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixFloatFast(System.UInt64)">
            <summary>
            Generates a random bounded float between 0.0f (inclusive) and 1.0f (exclusive) using <see cref="M:ShaiRandom.Mixers.MixFast(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixFloatFast(++state)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixFloatFast(++state)</code>.</param>
            <returns>A float between 0.0f (inclusive) and 1.0f (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixDoubleFast(System.UInt64)">
            <summary>
            Generates a random bounded double between 0.0 (inclusive) and 1.0 (exclusive) using <see cref="M:ShaiRandom.Mixers.MixFast(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixDoubleFast(++state)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixDoubleFast(++state)</code>.</param>
            <returns>A double between 0.0 (inclusive) and 1.0 (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixStrong(System.UInt64)">
            <summary>
            A high-quality mixing method that takes its state as a parameter; state is expected to change between calls to this.
            </summary>
            <remarks>It is suggested that you use <code>Mixers.MixStrong(++state)</code> to produce a sequence of different numbers, but any increments are allowed
            (even-number increments won't be able to produce all outputs, but their quality will be fine for the numbers they
            can produce). All longs are accepted by this method, and all longs can be produced. Passing 0 here does not cause this to produce 0.
            <br/>
            This uses Pelle Evensen's <a href="https://mostlymangling.blogspot.com/2020/01/nasam-not-another-strange-acronym-mixer.html">xNASAM</a>.
            It has excellent qualities regardless of patterns in input, though issues could be detected by running specific tests on many petabytes (or more) of generated numbers.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixStrong(++state)</code>.</param>
            <returns>Any ulong.</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixIntStrong(System.UInt64,System.Int32)">
            <summary>
            Generates a random bounded int between 0 (inclusive) and outerBound (exclusive) using <see cref="M:ShaiRandom.Mixers.MixStrong(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixIntStrong(++state, bound)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixIntStrong(++state, bound)</code>.</param>
            <param name="outerBound">The outer exclusive bound; may be positive or negative.</param>
            <returns>An int between 0 (inclusive) and outerBound (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixLongStrong(System.UInt64,System.Int64,System.Int64)">
            <summary>
            Generates a random bounded long between innerBound (inclusive) and outerBound (exclusive) using <see cref="M:ShaiRandom.Mixers.MixStrong(System.UInt64)"/> internally.
            </summary>
            <remarks>
            This can be used to generate longs in any range less broad than the full set of possible long results (to generate any long, cast <see cref="M:ShaiRandom.Mixers.MixStrong(System.UInt64)"/> to long).
            It can also be used to generate int values with arbitrary inner and outer bounds, just by giving ints for the bounds and casting the result to an int.
            <br/>
            It is suggested that you use <code>Mixers.MixLongStrong(++state, innerBound, outerBound)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixLongStrong(++state, innerBound, outerBound)</code>.</param>
            <param name="innerBound">The inner inclusive bound; may be positive or negative.</param>
            <param name="outerBound">The outer exclusive bound; may be positive or negative.</param>
            <returns>A long between innerBound (inclusive) and outerBound (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixFloatStrong(System.UInt64)">
            <summary>
            Generates a random bounded float between 0.0f (inclusive) and 1.0f (exclusive) using <see cref="M:ShaiRandom.Mixers.MixStrong(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixFloatStrong(++state)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixFloatStrong(++state)</code>.</param>
            <returns>A float between 0.0f (inclusive) and 1.0f (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixDoubleStrong(System.UInt64)">
            <summary>
            Generates a random bounded double between 0.0 (inclusive) and 1.0 (exclusive) using <see cref="M:ShaiRandom.Mixers.MixStrong(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixDoubleStrong(++state)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixDoubleStrong(++state)</code>.</param>
            <returns>A double between 0.0 (inclusive) and 1.0 (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixMX(System.UInt64)">
            <summary>
            A very-high-quality mixing method that takes its state as a parameter; state is expected to change between calls to this.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixMX(++state)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            <br/>
            Unlike the other Mix methods here, passing 0 here causes this to produce 0.
            </remarks>
            <br/>
            This uses Jon Kagstrom's <a href="http://jonkagstrom.com/mx3/mx3_rev2.html">Revised MX3 Mixer</a>, which seems exceedingly robust even after long runs of
            the brutally-difficult remortality test.
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixMX(++state)</code>.</param>
            <returns>Any ulong.</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixIntMX(System.UInt64,System.Int32)">
            <summary>
            Generates a random bounded int between 0 (inclusive) and outerBound (exclusive) using <see cref="M:ShaiRandom.Mixers.MixMX(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixIntMX(++state, bound)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixIntMX(++state, bound)</code>.</param>
            <param name="outerBound">The outer exclusive bound; may be positive or negative.</param>
            <returns>An int between 0 (inclusive) and outerBound (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixLongMX(System.UInt64,System.Int64,System.Int64)">
            <summary>
            Generates a random bounded long between innerBound (inclusive) and outerBound (exclusive) using <see cref="M:ShaiRandom.Mixers.MixMX(System.UInt64)"/> internally.
            </summary>
            <remarks>
            This can be used to generate longs in any range less broad than the full set of possible long results (to generate any long, cast <see cref="M:ShaiRandom.Mixers.MixMX(System.UInt64)"/> to long).
            It can also be used to generate int values with arbitrary inner and outer bounds, just by giving ints for the bounds and casting the result to an int.
            <br/>
            It is suggested that you use <code>Mixers.MixLongMX(++state, innerBound, outerBound)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixLongMX(++state, innerBound, outerBound)</code>.</param>
            <param name="innerBound">The inner inclusive bound; may be positive or negative.</param>
            <param name="outerBound">The outer exclusive bound; may be positive or negative.</param>
            <returns>A long between innerBound (inclusive) and outerBound (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixFloatMX(System.UInt64)">
            <summary>
            Generates a random bounded float between 0.0f (inclusive) and 1.0f (exclusive) using <see cref="M:ShaiRandom.Mixers.MixMX(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixFloatMX(++state)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixFloatMX(++state)</code>.</param>
            <returns>A float between 0.0f (inclusive) and 1.0f (exclusive).</returns>
        </member>
        <member name="M:ShaiRandom.Mixers.MixDoubleMX(System.UInt64)">
            <summary>
            Generates a random bounded double between 0.0 (inclusive) and 1.0 (exclusive) using <see cref="M:ShaiRandom.Mixers.MixMX(System.UInt64)"/> internally.
            </summary>
            <remarks>
            It is suggested that you use <code>Mixers.MixDoubleMX(++state)</code> to produce a sequence of different numbers. You can instead use any odd increment,
            but smaller ones are preferred because there is probably a very large constant that is close to the modular multiplicative inverse of the one constant
            multiplier this uses, and using that constant as an increment might cause problems.
            </remarks>
            <param name="state">Any ulong; subsequent calls should change by an odd number, such as with <code>Mixers.MixDoubleMX(++state)</code>.</param>
            <returns>A double between 0.0 (inclusive) and 1.0 (exclusive).</returns>
        </member>
        <member name="T:ShaiRandom.Serializer">
             <summary>
             Static class containing logic to take a string produced by <see cref="M:ShaiRandom.Generators.IEnhancedRandom.StringDeserialize(System.ReadOnlySpan{System.Char})"/>
             and produce an appropriate generator.
             </summary>
             <remarks>
             Before serializing/deserializing, you must register "tags" with the Serializer, which will be used to identify
             the type as it is deserialized.  No tags are registered by default.
            
             Each IEnhancedRandom implementation has a <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/> field, which constitutes the default
             tag that will be used for the generator type, if one is not specified when the registration is performed.  Therefore,
             if the default tag works for your use case, registration requires nothing more than calling <see cref="M:ShaiRandom.Serializer.RegisterTag(ShaiRandom.Generators.IEnhancedRandom)"/>.
             If you need to specify a different tag, there is an overload available which takes a tag.  Other functions are also provided
             which fit various use cases, including overwriting registered tags, removing tags, etc.
            
             You may also just call the <see cref="M:ShaiRandom.Serializer.RegisterShaiRandomDefaultTags"/> function, to register the default tags for every generator
             implementation in ShaiRandom.
            
             If you have custom <see cref="T:ShaiRandom.Generators.IEnhancedRandom"/> implementations, provided they implement <see cref="M:ShaiRandom.Generators.IEnhancedRandom.StringSerialize"/>,
             <see cref="M:ShaiRandom.Generators.IEnhancedRandom.StringDeserialize(System.ReadOnlySpan{System.Char})"/>, and <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Copy"/>, you may register them to function with this
             serializer by calling RegisterTag or any of the other tag registration functions.
             </remarks>
        </member>
        <member name="M:ShaiRandom.Serializer.RegisterTag(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Registers an instance of an IEnhancedRandom implementation by its string <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            The type of generator given already had a tag, the generator's DefaultTag was already registered to a generator, or the generator's
            DefaultTag contained invalid characters.
            </exception>
            <param name="instance">An instance of an IEnhancedRandom implementation, which will be copied as needed; its state does not matter,
            as long as it is non-null and has a valid value for <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>.</param>
        </member>
        <member name="M:ShaiRandom.Serializer.RegisterTag(System.String,ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Registers an instance of an IEnhancedRandom implementation to the tag specified.
            </summary>
            <exception cref="T:System.ArgumentException">
            The type of generator given already had a tag, the given tag was already registered to a generator, or the generator's
            DefaultTag contained invalid characters.
            </exception>
            <param name="tag">The tag to register to the given instance's type.</param>
            <param name="instance">An instance of an IEnhancedRandom implementation, which will be copied as needed; its state does not matter,
            as long as it is non-null and has a valid value for <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>.</param>
        </member>
        <member name="M:ShaiRandom.Serializer.TryRegisterTag(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Tries to register an instance of an IEnhancedRandom implementation by its string <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>.
            </summary>
            <param name="instance">An instance of an IEnhancedRandom implementation, which will be copied as needed; its state does not matter,
            as long as it is non-null and has a valid value for <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>.</param>
            <returns>Returns true if the tag was successfully registered for the first time, or false if the tags are unchanged.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.TryRegisterTag(System.String,ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Tries to register an instance of an IEnhancedRandom implementation to the tag specified.
            </summary>
            <param name="tag">The tag to register for generators of the given instance's type.</param>
            <param name="instance">An instance of an IEnhancedRandom implementation, which will be copied as needed; its state does not matter,
            as long as it is non-null.</param>
            <returns>Returns true if the tag was successfully registered for the first time, or false if the tags are unchanged.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.ForceRegisterTag(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Registers an instance of an IEnhancedRandom implementation by its string <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>,
            overwriting any conflicting tag or type registrations.
            </summary>
            <remarks>
            This function will overwrite _both_ conflicting tags AND conflicting types; eg. if the instance's DefaultTag
            is registered to a different type, that type's registration will be replaced, AND if the type of the instance
            given is already registered to a different tag, that registration will be replaced with this one.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The generator's DefaultTag contained invalid characters.
            </exception>
            <param name="instance">An instance of an IEnhancedRandom implementation, which will be copied as needed; its state does not matter,
            as long as it is non-null and has a valid value for <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>.</param>
        </member>
        <member name="M:ShaiRandom.Serializer.ForceRegisterTag(System.String,ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Registers an instance of an IEnhancedRandom implementation to the tag specified,
            overwriting any conflicting tag or type registrations.
            </summary>
            <remarks>
            This function will overwrite _both_ conflicting tags AND conflicting types; eg. if the given tag is registered
            to a different type, that type's registration will be replaced, AND if the type of the instance given is already
            registered to a different tag, that registration will be replaced with this one.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The given tag contained invalid characters.
            </exception>
            <param name="tag">The tag to register for generators of the given instance's type.</param>
            <param name="instance">An instance of an IEnhancedRandom implementation, which will be copied as needed; its state does not matter,
            as long as it is non-null and has a valid value for <see cref="P:ShaiRandom.Generators.IEnhancedRandom.DefaultTag"/>.</param>
        </member>
        <member name="M:ShaiRandom.Serializer.UnregisterTag(System.String)">
            <summary>
            Unregisters any generator type that is registered to the given tag.
            </summary>
            <param name="tag">The tag to unregister</param>
            <returns>True if the tag was found and unregistered; false if the tag given isn't found.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.UnregisterTag(System.Type)">
            <summary>
            Unregisters the given type's tag, whatever that tag may be.
            </summary>
            <param name="generatorType">The type to unregister.</param>
            <returns>True if the type was found and its tag was unregistered; false if the generator type given was never registered.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.UnregisterTag``1">
            <summary>
            Unregisters the given type's tag, whatever that tag may be.
            </summary>
            <typeparam name="T">Type of the generator to unregister.</typeparam>
            <returns>True if the type was found and its tag was unregistered; false if the generator type given was never registered.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.GetTag(System.Type)">
            <summary>
            Gets the tag registered for the given type.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No tag was registered for the given type.</exception>
            <param name="generatorType">Type to retrieve the registered tag for.</param>
            <returns>The tag registered for the given type</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.GetTag``1">
            <summary>
            Gets the tag registered for the given type.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No tag was registered for the given type.</exception>
            <typeparam name="T">Type to retrieve the registered tag for.</typeparam>
            <returns>The tag registered for the given type</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.GetTag(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Gets the tag registered for the given instance's type.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No tag was registered for the type of the given instance.</exception>
            <param name="instance">Instance to retrieve the tag for.</param>
            <returns>The tag registered for the runtime type of the given instance.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.TryGetTag(System.Type,System.String@)">
            <summary>
            Tries to get the tag registered for the given type.
            </summary>
            <param name="generatorType">Type to retrieve the registered tag for.</param>
            <param name="tag">Out-variable in which to place the retrieved tag, or null if the type had no registered tag.</param>
            <returns>True if a tag was found; false otherwise.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.TryGetTag``1(System.String@)">
            <summary>
            Tries to get the tag registered for the given type.
            </summary>
            <typeparam name="T">Type to retrieve the registered tag for.</typeparam>
            <param name="tag">Out-variable in which to place the retrieved tag, or null if the type had no registered tag.</param>
            <returns>True if a tag was found; false otherwise.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.TryGetTag(ShaiRandom.Generators.IEnhancedRandom,System.String@)">
            <summary>
            Tries to get the tag registered for the type of the given generator instance.
            </summary>
            <param name="instance">The instance for which to retrieve the registered tag.</param>
            <param name="tag">Out-variable in which to place the retrieved tag, or null if the instance's runtime type had no registered tag.</param>
            <returns>True if a tag was found; false otherwise.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.GetTagOrNull(System.Type)">
            <summary>
            Gets the tag registered for the given type, or null if no tag is registered for that type.
            </summary>
            <param name="generatorType">Type to retrieve the registered tag for.</param>
            <returns>The tag registered for the given type, or null if no tag was registered for the given type.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.GetTagOrNull``1">
            <summary>
            Gets the tag registered for the given type, or null if no tag is registered for that type.
            </summary>
            <typeparam name="T">Type to retrieve the registered tag for.</typeparam>
            <returns>The tag registered for the given type, or null if no tag was registered for the given type.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.GetTagOrNull(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Gets the tag registered for the type of the given instance, or null if no tag is registered for that type.
            </summary>
            <param name="instance">Generator for which to retrieve the tag.</param>
            <returns>The tag registered for the runtime type of the given instance, or null if no tag was registered for that type.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.RegisterShaiRandomDefaultTags">
            <summary>
            Registers the DefaultTag for all of the IEnhancedRandom implementations in ShaiRandom.
            </summary>
            <exception cref="T:System.ArgumentException">One of the tags failed to register.</exception>
            <remarks>
            This function will throw an exception if any of the tags are already registered to their type,
            or if any of the tags have already been registered to something else.  For a more tolerant way of setting
            tags, see the <see cref="M:ShaiRandom.Serializer.TryRegisterShaiRandomDefaultTags"/> function.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Serializer.TryRegisterShaiRandomDefaultTags">
            <summary>
            Tries to register the DefaultTag for all of the IEnhancedRandom implementations in ShaiRandom.
            </summary>
            <remarks>
            This function will return false if ANY of the tags failed to set; however it will attempt to set tags for
            ALL the generators in ShaiRandom, even if one fails.  If you wish to forcibly set all the built-in ShaiRandom
            generators to be registered to their tag, see the <see cref="M:ShaiRandom.Serializer.ForceRegisterShaiRandomDefaultTags"/> function.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Serializer.ForceRegisterShaiRandomDefaultTags">
            <summary>
            Registers the DefaultTag for all of the IEnhancedRandom implementations in ShaiRandom, overwriting any
            existing registrations for those types and tags.
            </summary>
            <remarks>
            This function will unregister any conflicting tags, and replace them with the default tags, for all
            ShaiRandom implementations.  For a way of setting tags that is more tolerant to existing registrations,
            see <see cref="M:ShaiRandom.Serializer.TryRegisterShaiRandomDefaultTags"/>.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Serializer.Serialize(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Produces a string representing the serialized form of the given RNG, by calling its <see cref="M:ShaiRandom.Generators.IEnhancedRandom.StringSerialize"/>
            method.
            </summary>
            <param name="rng">RNG to serialize.</param>
            <returns>A string representing the serialized form of the given RNG.</returns>
        </member>
        <member name="M:ShaiRandom.Serializer.Deserialize(System.ReadOnlySpan{System.Char})">
             <summary>
             Given data from a string produced by <see cref="M:ShaiRandom.Generators.IEnhancedRandom.StringSerialize"/> on any registered IEnhancedRandom,
             this returns a new IEnhancedRandom with the same implementation and state it had when it was serialized.
             </summary>
             <remarks>
             This function will support any IEnhancedRandom implementation that has been registered with the serializer,
             provided that it had the same tag registered to it when it was serialized that it does when this function is called.
            
             This function takes as input a ReadOnlySpan of char, which allows data to be any string or some more specialized types.
             </remarks>
             <param name="data">A string or ReadOnlySpan of char produced by an IEnhancedRandom's StringSerialize() method.</param>
             <returns>A newly-allocated IEnhancedRandom matching the implementation and state of the serialized IEnhancedRandom.</returns>
        </member>
        <member name="T:ShaiRandom.SpanHelpers">
            <summary>
            Some helper methods that can be useful when parsing span data.
            </summary>
        </member>
        <member name="M:ShaiRandom.SpanHelpers.IndexOf``1(System.ReadOnlySpan{``0},``0,System.Int32)">
            <summary>
            IndexOf function which takes a starting point (like the similar overload for string).
            </summary>
            <param name="span"/>
            <param name="value">Value to search for.</param>
            <param name="start">Index at which to start searching.</param>
            <typeparam name="T">Type of elements in the span.</typeparam>
            <returns>
            Returns the index of first occurence of <paramref name="value"/> in <paramref name="span"/> which occurs on
            or after <paramref name="start"/>; or -1 if no such occurence exists.
            </returns>
        </member>
        <member name="T:ShaiRandom.Wrappers.ArchivalWrapper">
             <summary>
             Wraps another IEnhancedRandom without copying it, recording all results of individual calls to the generator in a <see cref="T:ShaiRandom.Generators.KnownSeriesRandom">KnownSeriesRandom</see>
             that can be used to replay the same results even if, for any reason, the results of the wrapped IEnhancedRandom change.
            </summary>
            <remarks>
             Version updates can sometimes change the series an IEnhancedRandom produces, so storing the KnownSeriesRandom is a surefire way to make the same values get produced.
             </remarks>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.DefaultTag">
            <summary>
            The identifying tag here is "ArW", which is a different length to indicate the tag is a wrapper.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.Wrapped">
            <summary>
            The ShaiRandom IEnhancedRandom being wrapped, which must never be null.
            </summary>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.MakeArchivedSeries">
            <summary>
            Creates a new KnownSeriesRandom that has the full sequence of archived results this has stored so far.
            </summary>
            <remarks>
            The result of this method does not share any state with this ArchivalWrapper, so if more method calls are archived, the KnownSeriesRandom won't know about them.
            You can call this again at any point to get another snapshot of the archive, from start to present, and can serialize the KnownSeriesRandom for permanent safe-keeping.
            </remarks>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.#ctor(ShaiRandom.Wrappers.ArchivalWrapper)">
            <summary>
            Creates a ArchivalWrapper that is a copy of the given one.
            </summary>
            <param name="other">Generator to copy state from.</param>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.#ctor">
            <summary>
            Creates a ArchivalWrapper that wraps a FourWheelRandom with a random state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.#ctor(ShaiRandom.Generators.IEnhancedRandom,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Creates a new known series generator, with parameters to indicate which series to use for
            the integer, unsigned integer, double, bool, and byte-based RNG functions. If null is
            specified, no values of that type may be returned, and functions that try to return a
            value of that type will throw an exception.
            </summary>
            <remarks>
            The values given for each series are looped over repeatedly as the appropriate function is called, so the
            RNG functions can be called an arbitrary number of times; doing so will simply result in values from the
            sequence being reused.
            </remarks>
            <param name="random">The IEnhancedRandom to wrap and record.</param>
            <param name="intSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInt"/>.</param>
            <param name="uintSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextUInt"/>.</param>
            <param name="doubleSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDouble"/>.</param>
            <param name="boolSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextBool"/>.</param>
            <param name="byteSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextBytes(System.Span{System.Byte})"/>.</param>
            <param name="floatSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextFloat"/>.</param>
            <param name="longSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextLong"/>.</param>
            <param name="ulongSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextULong"/>.</param>
            <param name="decimalSeries">Series of values to return via <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDecimal"/>.</param>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.StateCount">
            <summary>
            This generator has the same number of states as the wrapped generator; the recorded values are not considered state.
            They can be considered state for the <see cref="T:ShaiRandom.Generators.KnownSeriesRandom"/> this creates.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.SupportsReadAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.SelectState(System.Int32)"/> if the wrapped generator does.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.SupportsWriteAccess">
            <summary>
            This supports <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.SetSelectedState(System.Int32,System.UInt64)"/> if the wrapped generator does.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.SupportsSkip">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Skip(System.UInt64)"/> if the wrapped generator does.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.SupportsLeap">
            <summary>
            This supports <see cref="M:ShaiRandom.Generators.IEnhancedRandom.Leap"/> if the wrapped generator does.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ArchivalWrapper.SupportsPrevious">
            <summary>
            This supports <see cref="M:ShaiRandom.Wrappers.ArchivalWrapper.PreviousULong"/> if the wrapped generator does.
            </summary>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.Copy">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextBool">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInt">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInt(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextUInt">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextUInt(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextBits(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextUInt(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDouble">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDouble(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDouble(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextSparseFloat">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextSparseFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextSparseFloat(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextSparseDouble">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextSparseDouble(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextSparseDouble(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveDouble">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveDouble(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveDouble(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveDouble">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveDouble(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveDouble(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextFloat">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextFloat(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextFloat(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveFloat">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveFloat(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveFloat(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveFloat">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveFloat(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveFloat(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDecimal">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDecimal(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextDecimal(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveDecimal">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveDecimal(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextInclusiveDecimal(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveDecimal">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveDecimal(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextExclusiveDecimal(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextLong">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextLong(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextLong(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextULong">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextULong(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextULong(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.NextBytes(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.PreviousULong">
            <inheritdoc/>
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.Seed(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.SelectState(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.SetSelectedState(System.Int32,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.SetState(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.SetState(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.SetState(System.UInt64,System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.SetState(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.SetState(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.Skip(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.Leap">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.StringSerialize">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ArchivalWrapper.StringDeserialize(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="T:ShaiRandom.Wrappers.ReversingWrapper">
            <summary>
            Wraps another IEnhancedRandom without copying it, making all calls to "NextSomething()" on this ReversingWrapper move the state in reverse
            instead of forward in the wrapped IEnhancedRandom. This only works for IEnhancedRandom implementations that support <see cref="M:ShaiRandom.Wrappers.ReversingWrapper.PreviousULong"/>,
            which can be checked with <see cref="P:ShaiRandom.Wrappers.ReversingWrapper.SupportsPrevious"/>. If the wrapped IEnhancedRandom supports <see cref="M:ShaiRandom.Wrappers.ReversingWrapper.Skip(System.UInt64)"/>, then this
            ReversingWrapper will permit calls to its Skip, and they will also go in reverse. The most common use for this would be to run
            the wrapped generator forward and track the number of calls made, then run the ReversingWrapper by the same number of calls
            (potentially using Skip(), if supported) to revert the state to its original value. This is more convenient for the usage where
            you use <see cref="M:ShaiRandom.Generators.EnhancedRandomExtensions.Shuffle``1(ShaiRandom.Generators.IEnhancedRandom,System.Span{``0})"/> or other Shuffle variants with both the wrapped
            generator and wrapper, since they will use the same amount of calls, and this will even un-shuffle the array (restoring it to its order before the shuffle).
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.DefaultTag">
            <summary>
            The identifying tag here is "RvW", which is a different length to indicate the tag is a wrapper.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.Wrapped">
            <summary>
            The ShaiRandom generator being wrapped, which must never be null.
            </summary>
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.#ctor">
            <summary>
            Creates a new ReversingWrapper around a new <see cref="T:ShaiRandom.Generators.FourWheelRandom"/> generator with a random initial
            state.
            </summary>
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.#ctor(System.UInt64)">
            <summary>
            Creates a new ReversingWrapper around a new <see cref="T:ShaiRandom.Generators.FourWheelRandom"/> generator seeded with the given
            value.
            </summary>
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.#ctor(ShaiRandom.Generators.IEnhancedRandom)">
            <summary>
            Creates a new ReversingWrapper around the given generator, which must support <see cref="M:ShaiRandom.Generators.IEnhancedRandom.PreviousULong"/>.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.StateCount">
            <summary>
            The <see cref="P:ShaiRandom.Generators.IEnhancedRandom.StateCount"/> of the wrapped generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.SupportsReadAccess">
            <summary>
            The <see cref="P:ShaiRandom.Generators.IEnhancedRandom.SupportsReadAccess"/> value of the wrapped generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.SupportsWriteAccess">
            <summary>
            The <see cref="P:ShaiRandom.Generators.IEnhancedRandom.SupportsWriteAccess"/> value of the wrapped generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.SupportsSkip">
            <summary>
            The <see cref="P:ShaiRandom.Generators.IEnhancedRandom.SupportsSkip"/> value of the wrapped generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.SupportsLeap">
            <summary>
            The <see cref="P:ShaiRandom.Generators.IEnhancedRandom.SupportsLeap"/> value of the wrapped generator.
            </summary>
        </member>
        <member name="P:ShaiRandom.Wrappers.ReversingWrapper.SupportsPrevious">
            <summary>
            The <see cref="P:ShaiRandom.Generators.IEnhancedRandom.SupportsPrevious"/> value of the wrapped generator.
            </summary>
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.Copy">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.NextULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.Seed(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.StringSerialize">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.StringDeserialize(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.Skip(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.PreviousULong">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.SelectState(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ShaiRandom.Wrappers.ReversingWrapper.SetSelectedState(System.Int32,System.UInt64)">
            <inheritdoc />
        </member>
    </members>
</doc>
